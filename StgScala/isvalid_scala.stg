group c_isvalid;

rtlModuleName() ::= ""


getStringSize(p) ::= "strlen(<p>)"



JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if ret.isRight then // isvalid:13
    <soNestedPart>
<endif>
>>

JoinTwoIfFirstOk(sStr1,sStr2) ::=<<
<sStr1>
if ret.isRight then // isvalid:20
    <sStr2>
>>

JoinItems2(sPart, sNestedPart) ::= <<
// isvalid:25
<sPart>
<sNestedPart>
>>

always_true_statement ()::= <<
ret = Right(0) // isvalid_scala:31
>>

always_false_statement(sErrorCodeName)::= <<
ret = <sErrorCodeName> // isvalid_scala:38
>>

makeExpressionToStatement0(sIsValidExp) ::= <<
<sIsValidExp>
>>

convertVCBExpressionToStatementAndUpdateErrCode(sIsValidExp, sErrCode) ::= <<
ret = <sIsValidExp> // isvalid_scala:46
ret = <sErrCode>    // TODO ret is set directly again?
>>

convertVCBStatementToStatementAndUpdateErrCode(sStatement, sErrCode) ::= <<
if <sStatement> then Right(0) else Left(<sErrCode>) // isvalid:48
>>

convertVCBTRUEToStatementAndUpdateErrCode() ::= <<
ret = Right(0) // isvalid:53
>>
convertVCBFalseToStatementAndUpdateErrCode(sErrCode) ::= <<
ret = Left(<sErrCode>) // isvalid:56
>>

/*
*****************************************************************************************
 C H E C K   C O N S T R A I N T S      F U N C T I O N S
*****************************************************************************************
*/

EmitTypeAssignment_composite_def_err_code(sErrCode, nErrValue, arrsErrorCodeComments) ::= <<
@inline @cCode.inline val <sErrCode>: Int = <nErrValue> // isvalid:68 /*<arrsErrorCodeComments : {x|<x>}; separator = "\n"> */
>>

EmitTypeAssignment_composite_def(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes) ::= <<
<arrsErrcodes; separator="\n">
>>

EmitTypeAssignment_composite(sVarName, sPtrPrefix, sPtrSuffix, sFuncName, sTypeDefName, sContent, arrsAlphaFuncs, arrsLocalVars, bUnreferenced) ::= <<
<arrsAlphaFuncs; separator="\n">
def <sFuncName>(<if(bUnreferenced)>@annotation.unused <endif><sVarName>: <sTypeDefName>): Either[ErrorCode, Int] = // isvalid:74
{
    var ret: Either[ErrorCode, Int] = ??? 
    <arrsLocalVars; separator="\n">

    <sContent>
    
    ret
}
>>

ExpEqual(sExp1, sExp2) ::= "(<sExp1> == <sExp2>)"
ExpStringEqual(sExp1, sExp2) ::= "(<sExp1> == <sExp2>)"
ExpGt(sExp1, sExp2) ::= "(<sExp1> \> <sExp2>)/* isvalid:87 */"
ExpGte(sExp1, sExp2) ::= "(<sExp1> \>= <sExp2>)/* isvalid:88 */"
ExpLt(sExp1, sExp2) ::= "(<sExp1> \< <sExp2>)/* isvalid:89 */"
ExpLte(sExp1, sExp2) ::= "(<sExp1> \<= <sExp2>)/* isvalid:90 */"
ExpOr(sExp1, sExp2) ::= "((<sExp1>) || (<sExp2>))"
ExpAnd(sExp1, sExp2) ::= "(<sExp1> && <sExp2>)"
ExpAndMulit(arrsExp) ::= <<
<arrsExp; separator=" && ">
>>
ExpNot(sExp) ::= "(!<sExp>)"
StrLen(sExp) ::= "<sExp>.length()"
ArrayLen(sExp, sAcc) ::= "<sExp><sAcc>nCount // isvalid_scala:101"

ExpressionToStament(sExp1) ::=<<
ret = <sExp1> // isvalid:101
>>

StatementOrStament(sStat1, sStat2) ::= <<
<sStat1>
if ret == 0 then // isvalid_scala:106
    <sStat2>
>>

ExpressionOrStament(sExp1, sStat2) ::= <<
ret = <sExp1>; 
if (ret != 0) { // isvalid_scala:116
    <sStat2>
}
>>

StatementOrExpression(sStat1, sExp2) ::= <<
<sStat1>
if (!ret) { // isvalid_scala:123
    ret = <sExp2>;
}
>>

StatementAndStament(sStat1, sStat2) ::= <<
<sStat1>
if (ret) { // isvalid_scala:130
    <sStat2>
}
>>

ExpressionAndStament(sExp1, sStat2) ::= <<
ret = <sExp1>;
if (ret) { // isvalid_scala:137
    <sStat2>
}
>>

StatementAndExpression(sStat1, sExp2) ::= <<
<sStat1>
if (ret) { // isvalid_scala:144
    ret = <sExp2>;
}
>>

StatementNot(sStat) ::= <<
<sStat>
ret = !ret; // isvalid_scala:151
>>

StatementExceptStament(sStat1, sStat2) ::= <<
<sStat1>
if (ret) {  // isvalid_scala:156
    <sStat2>
    ret = !ret;
}
>>

ExpressionExceptStament(sExp1, sStat2) ::= <<
ret = <sExp1>;
if (ret) { // isvalid_scala:164
    <sStat2>
    ret = !ret;
}
>>

StatementExceptExpression(sStat1, sExp2) ::= <<
<sStat1>;
if (ret) { // isvalid_scala:172
    ret = !(<sExp2>);
}
>>

StatementForLoop(p, sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++) 
{
    <sInnerStatement>
}
>>



Print_AlphabetCheckFunc(sFuncName, arrsAlphaConBody) ::= <<
def <sFuncName>(const char* str): flag = 
{
    flag ret=TRUE;
    int i=0;

    while ((str[i] != '\0') && ret) {
        ret = ret && (<arrsAlphaConBody; separator=" && ">);
        i = i + 1;
    }
    return ret;
}
>>



SingleValContraint(p, v) ::= "(<p> == <v>)"





stringContainsChar(sStrVal, p) ::= "strchr(<sStrVal>, <p>)"

RangeContraint(p, v1, v2, bMin, bMax) ::= "(<v1> \<<if(bMin)>=<endif> <p> && <p> \<<if(bMax)>=<endif> <v2>)"

RangeContraint_val_MAX(p, v, bMin) ::= "(<p> ><if(bMin)>=<endif> <v>)"

RangeContraint_MIN_val(p, v, bMax) ::= "(<p> \<<if(bMax)>=<endif> <v>)"


AND_Constraint(sCon1, sCon2) ::= "(<sCon1> && <sCon2>)"

OR_Constraint(sCon1, sCon2) ::= "(<sCon1> || <sCon2>)"

AllExceptConstraint(sCon)  ::= "(!<sCon>)"

ExceptConstraint(sCon1,sCon2) ::= "(<sCon1> &&  !<sCon2>)"

callAlphaFunc(sFuncName, p) ::= "<sFuncName>_CharsAreValid(<p>)"

PrintMultipleConstraints(arrsConstraints) ::= "<arrsConstraints; separator=\" && \">"






Emit_type(arrsConstraints, sErrCodeName) ::= <<
ret = <arrsConstraints; separator=" && ">;
ret = <sErrCodeName>;
>>


call_base_type_func(p, sFuncName, soTypeCasting) ::= "<sFuncName>(<p>) // isvalid:236"

call_base_type_func_exp(p, sFuncName) ::= "<sFuncName>(<p>)"


/* SEQUENCE start*/


Sequence_OptionalChild(p, sAcc,  sChName, sInnerStatement) ::= <<
if (<p><sAcc>exist.<sChName>) {
    <sInnerStatement>
}
>>


Sequence_optional_child_always_present_or_absent(p, sAcc,  sChName, sErrCode, sPresOrAbs) ::= <<
ret = <p><sAcc>exist.<sChName> == <sPresOrAbs>;
ret = <sErrCode>;
>>

Sequence_optional_child_always_present_or_absent_expr(p, sAcc,  sChName, sPresOrAbs) ::= <<
<p><sAcc>exist.<sChName> == <sPresOrAbs>
>>



/* SEQUENCE end*/


/* CHOICE start*/

Choice_OptionalChild(p, sAcc, sChPresent, sInnerStatement) ::= <<
ret = <p> match // isvalid:268
    case <sChPresent>(e) => 
        <sInnerStatement> 
    case _ => 
        Left(272)
>>

Choice_child_always_present_Exp(p, sAcc, sChPresent) ::= <<
<p><sAcc>kind == <sChPresent> // isvalid:276
>>

Choice_child_always_absent_Exp(p, sAcc, sChPresent) ::= <<
<p><sAcc>kind != <sChPresent> //isvalid:280
>>

choice_child(sChPresent, sChildBody, bAlwaysAbsent) ::= <<
case <sChPresent> => // isvalid:284
    <sChildBody>         
>>

choice(p, sAccess, arrsChildren, sErrCodeForInvalidCase) ::= <<
<p><sAccess>kind match // isvalid:289
    <arrsChildren; separator="\n">
    case _ =>
        ret = <sErrCodeForInvalidCase>
>>

/* CHOICE end*/

sequenceOf(p,sAcc, i, bIsFixedSize, nFixedSize, soIsValidSizeExp, soErrCode, soInnerStatement) ::= <<
<if(!bIsFixedSize)>
ret = <soIsValidSizeExp>;
ret = <soErrCode>;

<endif>
<if (soInnerStatement)>
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++) 
{
    <soInnerStatement>
}

<endif>
>>

sequenceOf2(p,sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++) 
{
    <sInnerStatement>
}
>>


octet_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral )::=<<
OctetString_equal(<p><sAccess>nCount, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

octet_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral )::=<<
OctetString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

bit_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral, sBitArrayLiteral )::=<<
BitString_equal(<p><sAccess>nCount, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

bit_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral, sBitArrayLiteral )::=<<
BitString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>


objId_equal(p, sObjIdLiteral)::=<<
ObjectIdentifier_equal(<p>, &<sObjIdLiteral>)
>>


