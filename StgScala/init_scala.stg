group c_init;


rtlModuleName() ::= "adaasn1rtl"
methodNameSuffix() ::= "_Initialize"

initTypeAssignment_def(sVarName, sStar, sFuncName, sTypeDefName) ::= << >>

initTypeAssignment(sVarName, sPtrPrefix, sPtrSuffix, sFuncName, sTypeDefName, sContent, arrsLocalVariables, sDefaultInitValue, arrsAnnots) ::= <<
<arrsAnnots:{ann|@<ann>}; separator=" ">
def <sFuncName>(): <sTypeDefName> = <sDefaultInitValue>
>>

initInteger(sVal, sValue, bIsOptional) ::= <<
<if(bIsOptional)>
<sVal> = SomeMut(<sValue>)
<else>
<sVal> = <sValue>
<endif>
>>
initReal(sVal, dValue, bIsOptional) ::= <<
<if(bIsOptional)>
<sVal> = SomeMut(<dValue>)
<else>
<sVal> = <dValue>
<endif>
>>
initBoolean(sVal, bValue, bIsOptional) ::= <<
<if(bIsOptional)>
<sVal> = SomeMut(<if(bValue)>true<else>false<endif>)
<else>
<sVal> = <if(bValue)>true<else>false<endif>
<endif>
>>

initObjectIdentifier_valid(p, sAcc, sI, nIntVal) ::= "<p><sAcc>values(<sI>) = <nIntVal>"
initObjectIdentifier(p, sAcc, nSize, arrsValues) ::= <<
<p><sAcc>nCount = <nSize>
<arrsValues; separator="\n">
>>

init_Asn1LocalTime(p, sAcc, tv/*:Asn1TimeValue*/) ::= <<
<p><sAcc>hours = <tv.hours>
<p><sAcc>mins = <tv.mins>
<p><sAcc>sec = <tv.secs>
<p><sAcc>fraction = <tv.secsFraction>
>>

init_Asn1UtcTime(p, sAcc, tv/*:Asn1TimeValue*/) ::= <<
<p><sAcc>hours = <tv.hours>
<p><sAcc>mins = <tv.mins>
<p><sAcc>sec = <tv.secs>
<p><sAcc>fraction = <tv.secsFraction>
>>


init_Asn1LocalTimeWithTimeZone(p, sAcc, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<p><sAcc>hours = <tv.hours>
<p><sAcc>mins = <tv.mins>
<p><sAcc>sec = <tv.secs>
<p><sAcc>fraction = <tv.secsFraction>
<p><sAcc>tz.sign = <tz.sign>
<p><sAcc>tz.hours = <tz.hours>
<p><sAcc>tz.mins = <tz.mins>
>>

init_Asn1Date(p, sAcc, dt/*:Asn1DateValue*/) ::= <<
<p><sAcc>years = <dt.years>
<p><sAcc>months = <dt.months>
<p><sAcc>days = <dt.days>
>>

init_Asn1Date_LocalTime(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1LocalTime(p=p, sAcc=sAcc, tv=tv)>
>>

init_Asn1Date_UtcTime(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1UtcTime(p=p, sAcc=sAcc, tv=tv)>
>>

init_Asn1Date_LocalTimeWithTimeZone(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1UtcTime(p=p, sAcc=sAcc, tv=tv, tz=tz)>
>>

assignAny(p, sValue, sTypeDecl) ::= "<p> = <sValue>"
assignString(p, sValue) ::= "<p> = <sValue>"


initIA5String(sPtr, sValue, bIsOptional) ::= <<
<if(bIsOptional)>
<sPtr> = SomeMut(<sValue>)
<else>
<sPtr> = <sValue>
<endif>
>>

initEnumerated(sVal, sValue, bIsOptional) ::= <<
<if(bIsOptional)>
<sVal> = SomeMut(<sValue>)
<else>
<sVal> = <sValue>
<endif>
>>

initNull(sVal, bIsOptional) ::= <<
<if(bIsOptional)>
<sVal> = SomeMut(0)
<else>
<sVal> = 0
<endif>
>>

initTestCaseIA5String(p, sAcc, nSize, nMaxSizePlusOne, i, td/*:FE_StringTypeDefinition*/, bAlpha, arrnAlphabetAsciiCodes, nAlphabetLength, bZero) ::= <<
<if(bZero)>
<p> = Array.fill(<nMaxSizePlusOne>)(0.toRawUByte)

<else>

<i> = 0
<p> = Array.fill(<nMaxSizePlusOne>)(0.toRawUByte)
while (<i> \< <nSize>) {
    <if(bAlpha)>
    val allowedCharSet: Array[UByte] = Array(<arrnAlphabetAsciiCodes:{ch|0x<ch;format="X2">.toRawUByte}; wrap, anchor, separator=",">)

    <p>(<i>) = allowedCharSet(<i> % <nAlphabetLength>)

    <else>
    <p>(<i>) = (if <i> % 128 == 0 then 'A'.toByte.toRawUByte else (<i> % 128).toByte.toRawUByte) // TODO: what is done here?

    <endif>
    <i> = <i> + 1
}

<endif>
>>

/* BIT AND OCTET STRINGS */

initBitOrOctStringFromCompoundLiteral(p, sCompLiteral) ::= "<p> = <sCompLiteral>"

initFixSizeBitOrOctString_bytei(p, sAcc, sI, sByteHexVal) ::= "<p><sAcc>arr(<sI>) = 0x<sByteHexVal>;"
initFixSizeBitOrOctString(p, sAcc,arrsBytes) ::= <<
<arrsBytes; separator="\n">
>>

initFixVarSizeBitOrOctString(p, sAcc, nSize, arrsBytes) ::= <<
<p><sAcc>nCount = <nSize>
<arrsBytes; separator="\n">
>>

initTestCaseOctetString(p, sAcc, sArrayHolderName, nSize, i, bIsFixedSize, bZero, nMinSize, bZeroSizedArray) ::= <<
<if(bZero)>
<p> = <sArrayHolderName>(<if(!bIsFixedSize)><nMinSize>, <endif>Array.fill(<nSize>)(0.toRawUByte))
<else>
<i> = 0
(while (<i>\< <nSize>) {
    <p>.arr(<i>) = (<i>%256).toByte.toRawUByte
    <i> += 1
})
<endif>

<if(!bIsFixedSize)><p><sAcc>nCount = <if(bZero)><nMinSize><else><nSize><endif><endif>
>>


initTestCaseBitString(p, sAcc, sArrayHolderName, nSize, nSizeCeiled, i, bIsFixedSize, bZero, nMinSize, bIsOptionalField) ::= <<
<if(bZero)>
<p> = <sArrayHolderName>(<if(!bIsFixedSize)><nMinSize>, <endif>Array.fill(<nSizeCeiled>/8)(0.toRawUByte)

<else>

<if(!bIsFixedSize)><p><sAcc>nCount = <nSize><endif>
<i> = 0
while (<i>\< <nSizeCeiled>/8 <if (bIsOptionalField)>&& <p><sAcc>isDefined<endif>) {
    <p><sAcc><if (bIsOptionalField)>get<sAcc><endif>arr(<i>) = 0x55.toRawUByte /* --> 0101 0101 as in Ada*/
    <i> = <i> + 1
}
<endif>
>>



/*SEQUENCE OF */

/*dummy in C*/
initSequence_pragma(p) ::= ""


initFixedSequenceOf(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">
>>


initVarSizeSequenceOf(p, sAcc, nSize, arrsInnerValues) ::= <<
<p><sAcc>nCount = <nSize>;
<arrsInnerValues; separator="\n">
>>


initTestCaseSizeSequenceOf_innerItem(bFirst, bLastItem, nCaseIdx, sChildCaseInit, i, nCaseLen) ::= <<
<if(!bLastItem)><if(bFirst)>if<else>else if<endif> (<i> % <nCaseLen> == <nCaseIdx>)  {<else>else {<endif>
    <sChildCaseInit>
}>>

initTestCaseSizeSequenceOf(p, sAcc, noMinSize, nSize, bIsFixedSize, arrsInnerItems, bMultiCases, i) ::= <<
<i> = 0
while (<i> \< <nSize>) {
    <arrsInnerItems; separator="\n">
    <i> = <i> + 1
}
<if(!bIsFixedSize)><p><sAcc>nCount = <if(noMinSize)><noMinSize><else><nSize><endif><endif>
>>


/*SEQUENCE*/

initSequence_optionalChild(p, sAcc, sChName, sPresentFlag, sChildContent) ::=<<
<p><sAcc>exist.<sChName> = if <sPresentFlag> == 0 then false else true
<sChildContent>
>>

initSequence(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">
>>

initSequence_emptySeq(p) ::= ""

initTestCase_sequence_child(p, sAcc, sChName, sChildContent, bOptional, sInitExpr) ::= <<
<if(bOptional)>
<p><sAcc><sChName> = SomeMut(<sInitExpr>)
<endif>

<sChildContent>
>>

initTestCase_sequence_child_opt(p, sAcc, sChName) ::= <<
<p><sAcc><sChName> = NoneMut()
>>

initChoice(p, sAcc, sChildContent, sChildID, sChildName, sChildTypeName, sChoiceTypeName, sChildTempVarName, sChildTempDefaultInit, bComponentTempInit) ::= <<
var <sChildTempVarName>: <sChildTypeName> = <sChildTempDefaultInit>
<sChildContent>
<p> = <sChildID>(<sChildTempVarName>)
>>

initTestCase_choice_child(p, sAcc, sChildContent, sChildID, sChildName, sChildTypeName, sChoiceTypeName, sChildTempVarName, sChildTempDefaultInit, bIsOptional) ::= <<
var <sChildTempVarName>: <sChildTypeName> = <sChildTempDefaultInit>
<sChildContent>
<if(bIsOptional)>
<p> = SomeMut(<sChildID>(<sChildTempVarName>))
<else>
<p> = <sChildID>(<sChildTempVarName>)
<endif>
>>

initChildWithInitFunc(p, sChildInitFuncName) ::= <<
<p> = <sChildInitFuncName>()
>>


initBitStringAtPos(sVarName, sStar, sFuncName, sTypeDefName, sNamedBit, nZeroBasedByteIndex, sHexByteMax, nZeroBasedBitIndex) ::= <<
void <sFuncName>_set_<sNamedBit>(<sTypeDefName><sStar> <sVarName>) /*COVERAGE_IGNORE*/
{
    <sVarName>->arr[<nZeroBasedByteIndex>] |= <sHexByteMax>; /*COVERAGE_IGNORE*/
}
>>

initBitStringAtPos_def(sVarName, sStar, sFuncName, sTypeDefName, sNamedBit) ::= <<
void <sFuncName>_set_<sNamedBit>(<sTypeDefName><sStar> <sVarName>);
>>

initTypeConstant_def(sTypeDecl, sConstantName, sValue) ::= <<
val <sConstantName>: <sTypeDecl> = <sValue>
>>

initTypeConstant_body(sTypeDecl, sConstantName, sValue) ::= <<
val <sConstantName>: <sTypeDecl> = <sValue>
>>

initFixSizeOctetString(sTypeDefName, nMax, bZeroSizedArray) ::= "<sTypeDefName>(Array.fill(<nMax>)(0.toRawUByte))"
initVarSizeOctetString(sTypeDefName, nMin, nMax) ::= "<sTypeDefName>(<nMin>, Array.fill(<nMax>)(0.toRawUByte))"

initFixSizeBitString(sTypeDefName, nMax, nMaxOctets) ::= "<sTypeDefName>(Array.fill(<nMaxOctets>)(0.toRawUByte))"
initVarSizeBitString(sTypeDefName, nMin, nMax, nMaxOctets) ::= "<sTypeDefName>(<nMin>, Array.fill(<nMaxOctets>)(0.toRawUByte))"

initFixSizeSequenceOfExpr(sTypeDefName, nMax, sChildExp) ::= "<sTypeDefName>(Array.fill(<nMax>)(<sChildExp>))"
initVarSizeSequenceOfExpr(sTypeDefName, nMin, nMax, sChildExp) ::= "<sTypeDefName>(<nMin>, Array.fill(<nMax>)(<sChildExp>))"


initObjectIdentifierAsExpr() ::= <<
{.nCount = 0, .values  = {[0 ... OBJECT_IDENTIFIER_MAX_LENGTH-1] = 0 }}
>>

init_Asn1LocalTimeExpr() ::= <<
{.hours = 0, .mins = 0, .sec = 0, .fraction = 0}
>>

init_Asn1UtcTimeExpr() ::= <<
{.hours = 0, .mins = 0, .sec = 0, .fraction = 0}
>>


init_Asn1LocalTimeWithTimeZoneExpr() ::= <<
{.hours = 0, .mins = 0, .sec = 0, .fraction = 0, .tz.sign = 0, .tz.hours = 0, .tz.mins = 0}
>>

init_Asn1DateExpr() ::= <<
{.years = 0, .months = 0, .days = 0}
>>

init_Asn1Date_LocalTimeExpr() ::= <<
{.years = 0, .months = 0, .days = 0, .hours = 0, .mins = 0, .sec = 0, .fraction = 0}
>>

init_Asn1Date_UtcTimeExpr() ::= <<
{.years = 0, .months = 0, .days = 0, .hours = 0, .mins = 0, .sec = 0, .fraction = 0}
>>

init_Asn1Date_LocalTimeWithTimeZoneExpr() ::= <<
{.years = 0, .months = 0, .days = 0, .hours = 0, .mins = 0, .sec = 0, .fraction = 0, .tz.sign = 0, .tz.hours = 0, .tz.mins = 0 }
>>

initSequenceChildExpr(sChildName, sChildExpr, bIsOptional, bIsAbsent) ::= <<
<if(bIsOptional)>
<if(bIsAbsent)>
<sChildName> = NoneMut()
<else>
<sChildName> = SomeMut(<sChildExpr>)
<endif>
<else>
<sChildName> = <sChildExpr>
<endif>
>>
initSequenceOptionalChildExpr(sChildName, nPresenceBit) ::= "<sChildName> = if <nPresenceBit> == 0 then false else true"
initSequenceExpr(sTypeDefName, arrsChildren, arrsOptionalChildren) ::= <<
<sTypeDefName>(<arrsChildren; separator=", ">)
>>

initChoiceExpr(sChildName, sChildKind, sChildExpr) ::= "<sChildKind>(<sChildExpr>)"
