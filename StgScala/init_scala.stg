group c_init;


rtlModuleName() ::= "adaasn1rtl"
methodNameSuffix() ::= "_Initialize"

initTypeAssignment_def(sVarName, sStar, sFuncName, sTypeDefName) ::= << >>

initTypeAssignment(sVarName, sPtrPrefix, sPtrSuffix, sFuncName, sTypeDefName, sContent, arrsLocalVariables, sDefaultInitValue) ::= <<
def <sFuncName>(): <sTypeDefName> = // init:10
{
    var <sVarName>: <sTypeDefName> = <sDefaultInitValue>

    <arrsLocalVariables; separator="\n // init:12">
    <sContent>
    <sVarName>
}
>>

initInteger(sVal, nValue) ::= "<sVal> = <nValue> // init:18"
initReal(sVal, dValue) ::= "<sVal> = <dValue> // init:19"
initBoolean(sVal, bValue) ::= "<sVal> = <if(bValue)>true<else>false<endif> // init:20"

initObjectIdentifier_vali(p, sAcc, sI, nIntVal) ::= "<p><sAcc>values[<sI>] = <nIntVal> // init:24"
initObjectIdentifier(p, sAcc, nSize, arrsValues) ::= <<
<p><sAcc>nCount = <nSize> // init:26
<arrsValues; separator="\n">
>>

init_Asn1LocalTime(p, sAcc, tv/*:Asn1TimeValue*/) ::= <<
<p><sAcc>hours = <tv.hours> // init:31
<p><sAcc>mins = <tv.mins>
<p><sAcc>sec = <tv.secs>  
<p><sAcc>fraction = <tv.secsFraction>
>>

init_Asn1UtcTime(p, sAcc, tv/*:Asn1TimeValue*/) ::= <<
<p><sAcc>hours = <tv.hours> // init:38
<p><sAcc>mins = <tv.mins>
<p><sAcc>sec = <tv.secs>  
<p><sAcc>fraction = <tv.secsFraction>
>>


init_Asn1LocalTimeWithTimeZone(p, sAcc, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<p><sAcc>hours = <tv.hours> // init:46
<p><sAcc>mins = <tv.mins>
<p><sAcc>sec = <tv.secs>  
<p><sAcc>fraction = <tv.secsFraction>
<p><sAcc>tz.sign = <tz.sign>
<p><sAcc>tz.hours = <tz.hours>
<p><sAcc>tz.mins = <tz.mins>
>>

init_Asn1Date(p, sAcc, dt/*:Asn1DateValue*/) ::= <<
<p><sAcc>years = <dt.years> // init:56
<p><sAcc>months = <dt.months>
<p><sAcc>days = <dt.days>
>>

init_Asn1Date_LocalTime(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1LocalTime(p=p, sAcc=sAcc, tv=tv)>
>>

init_Asn1Date_UtcTime(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1UtcTime(p=p, sAcc=sAcc, tv=tv)>
>>

init_Asn1Date_LocalTimeWithTimeZone(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1UtcTime(p=p, sAcc=sAcc, tv=tv, tz=tz)>
>>

assignAny(p, sValue) ::= "<p> = <sValue> // init:76"
assignString(p, sValue) ::= "<p> = <sValue> // init:77"


initIA5String(sPtr, sValue) ::= "strcpy(<sPtr>,<sValue>) // init:80"
initEnumerated(sVal, sValue, sEnum) ::= "<sVal> = <sEnum>.<sValue> // init:81"
initNull(sVal) ::= "<sVal> = 0"

initTestCaseIA5String(p, sAcc, nSize, nMaxSizePlusOne, i, td/*:FE_StringTypeDefinition*/, bAlpha, arrnAlphabetAsciiCodes, nAlphabetLength, bZero) ::= <<
<if(bZero)>
<p> = Array.fill(<nMaxSizePlusOne>){0} // init:87

<else>
// TODO bZero was false init_scala:89
<i> = 0;
<p> = Array.fill(<nMaxSizePlusOne>){0}; // init_scala:91
while (<i>\< <nSize>) {
    <if(bAlpha)>
    static byte allowedCharSet[] = {<arrnAlphabetAsciiCodes:{ch|0x<ch;format="X2">}; wrap, anchor, separator=",">}; 

    <p>[<i>] = allowedCharSet[<i> % <nAlphabetLength>];

    <else>
    <p>[<i>] = (char)(<i> % 128 == 0 ? 'A' : <i> % 128);

    <endif>
    <i> = <i> + 1;
}

<endif>
>>

/* BIT AND OCTET STRINGS */

initBitOrOctStringFromCompoundLiteral(p, sCompLiteral) ::= "<p> = <sCompLiteral>;"

initFixSizeBitOrOctString_bytei(p, sAcc, sI, sByteHexVal) ::= "<p><sAcc>arr[<sI>] = 0x<sByteHexVal>;"
initFixSizeBitOrOctString(p, sAcc,arrsBytes) ::= <<
<arrsBytes; separator="\n">
>>

initFixVarSizeBitOrOctString(p, sAcc, nSize, arrsBytes) ::= <<
<p><sAcc>nCount = <nSize>;
<arrsBytes; separator="\n">
>>

initTestCaseOctetString(p, sAcc, sArrayHolderName, nSize, i, bIsFixedSize, bZero, nMinSize) ::= <<
<if(bZero)>
<p> = <sArrayHolderName>(<if(!bIsFixedSize)><nMinSize>, <endif>Array.fill(<nSize>){0}) // init_scala:124
<else>
<i> = 0
(while (<i>\< <nSize>) { // init:131
    <p>(<i>) = (byte)(<i>%256)
    <i> += 1
})
<endif>
>>


initTestCaseBitString(p, sAcc, sArrayHolderName, nSize, nSizeCeiled, i, bIsFixedSize, bZero, nMinSize) ::= <<
<if(bZero)>
<p> = <sArrayHolderName>(<if(!bIsFixedSize)><nMinSize>, <endif>Array.fill(<nSizeCeiled>/8){0}) // init_scala:140

<else>
// bZero was false init_scala:143
<if(!bIsFixedSize)><p><sAcc>nCount = <nSize><endif>
<i> = 0;
while (<i>\< <nSizeCeiled>/8) {
    <p><sAcc>arr[<i>] = 0x55; /* --> 0101 0101 as in Ada*/
    <i> = <i> + 1;
}
<endif>
>>



/*SEQUENCE OF */

/*dummy in C*/
initSequence_pragma(p) ::= ""


initFixedSequenceOf(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">        
>>


initVarSizeSequenceOf(p, sAcc, nSize, arrsInnerValues) ::= <<
<p><sAcc>nCount = <nSize>;
<arrsInnerValues; separator="\n">        
>>


initTestCaseSizeSequenceOf_innerItem(bFirst, bLastItem, nCaseIdx, sChildCaseInit, i, nCaseLen) ::= <<
<if(!bLastItem)><if(bFirst)>if<else>else if<endif> (<i> % <nCaseLen> == <nCaseIdx>)  {<else>else {<endif>
    <sChildCaseInit>
}>>

initTestCaseSizeSequenceOf(p, sAcc, noMinSize, nSize, bIsFixedSize, arrsInnerItems, bMultiCases, i) ::= <<
<i> = 0 // init:175
while (<i> \< <nSize>) {
    <arrsInnerItems; separator="\n">
    <i> = <i> + 1
}
<if(!bIsFixedSize)><p><sAcc>nCount = <if(noMinSize)><noMinSize><else><nSize><endif><endif>
>>


/*SEQUENCE*/

initSequence_optionalChild(p, sAcc, sChName, sPresentFlag, sChildContent) ::=<<
<p><sAcc>exist.<sChName> = <sPresentFlag> //init:191
<sChildContent>
>>

initSequence(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">        
>>

initSequence_emptySeq(p) ::= ""

initTestCase_sequence_child(p, sAcc, sChName, sChildContent, bOptional) ::= <<
/*set <sChName> init:202*/
<if(bOptional)><p><sAcc>exist.<sChName> = true<endif>
<sChildContent>
>>

initTestCase_sequence_child_opt(p, sAcc, sChName) ::= <<
<p><sAcc>exist.<sChName> = false // init:208
>>

initChoice(p1, sAccess, sChildContent, sChildKind, sChildTempVarName, sChildTypeName, sChoiceTypeName, sChildName, bComponentTempInit) ::= <<
<p1><sAccess>kind = <sChildKind>;
<sChildContent>        
>>

initTestCase_choice_child(p, sAcc, sChildID, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName) ::= <<
/*set <sChildName> init:213*/
var <sChildContent>
<p> = <sChildID>(e.asInstanceOf[<sChildTypeDef>])
>>

initChildWithInitFunc(p, sChildInitFuncName) ::= <<
<p> = <sChildInitFuncName>() /*init:219*/
>>


initBitStringAtPos(sVarName, sStar, sFuncName, sTypeDefName, sNamedBit, nZeroBasedByteIndex, sHexByteMax, nZeroBasedBitIndex) ::= <<
void <sFuncName>_set_<sNamedBit>(<sTypeDefName><sStar> <sVarName>) /*COVERAGE_IGNORE*/
{
    <sVarName>->arr[<nZeroBasedByteIndex>] |= <sHexByteMax>; /*COVERAGE_IGNORE*/
}
>>

initBitStringAtPos_def(sVarName, sStar, sFuncName, sTypeDefName, sNamedBit) ::= <<
void <sFuncName>_set_<sNamedBit>(<sTypeDefName><sStar> <sVarName>);
>>

initTypeConstant_def(sTypeDecl, sConstantName, sValue) ::= <<
val <sConstantName>: <sTypeDecl> = <sValue> // init_scala:244
>>

initTypeConstant_body(sTypeDecl, sConstantName, sValue) ::= <<
val <sConstantName>: sTypeDecl> = <sValue> // init_scala:246
>>

initFixSizeOctetString(nMax) ::= "null"
initVarSizeOctetString(nMin, nMax) ::= "null"

initFixSizeBitString(nMax, nMaxOctets) ::= "null"
initVarSizeBitString(nMin, nMax, nMaxOctets) ::= "null"

initFixSizeSequenceOfExpr(nMax, sChildExp) ::= "null"
initVarSizeSequenceOfExpr(nMin, nMax, sChildExp) ::= "null"


initObjectIdentifierAsExpr() ::= <<
{.nCount = 0, .values  = {[0 ... OBJECT_IDENTIFIER_MAX_LENGTH-1] = 0 }}
>>

init_Asn1LocalTimeExpr() ::= <<
{.hours = 0, .mins = 0, .sec = 0, .fraction = 0}
>>

init_Asn1UtcTimeExpr() ::= <<
{.hours = 0, .mins = 0, .sec = 0, .fraction = 0}
>>


init_Asn1LocalTimeWithTimeZoneExpr() ::= <<
{.hours = 0, .mins = 0, .sec = 0, .fraction = 0, .tz.sign = 0, .tz.hours = 0, .tz.mins = 0}
>>

init_Asn1DateExpr() ::= <<
{.years = 0, .months = 0, .days = 0}
>>

init_Asn1Date_LocalTimeExpr() ::= <<
{.years = 0, .months = 0, .days = 0, .hours = 0, .mins = 0, .sec = 0, .fraction = 0}
>>

init_Asn1Date_UtcTimeExpr() ::= <<
{.years = 0, .months = 0, .days = 0, .hours = 0, .mins = 0, .sec = 0, .fraction = 0}
>>

init_Asn1Date_LocalTimeWithTimeZoneExpr() ::= <<
{.years = 0, .months = 0, .days = 0, .hours = 0, .mins = 0, .sec = 0, .fraction = 0, .tz.sign = 0, .tz.hours = 0, .tz.mins = 0 }
>>

initSequenceChildExpr(sChildName, sChildExpr) ::= "<sChildName> = <sChildExpr> /* init:285 */"
initSequenceOptionalChildExpr(sChildName, nPresenceBit) ::= "<sChildName> = <nPresenceBit> /* init:286 */"
initSequenceExpr(arrsChildren, arrsOptionalChildren) ::= <<
<arrsChildren; separator=", "><if (arrsOptionalChildren)>, exist = null <endif> /* init:288 */
>>

initChoiceExpr(sChildName, sChildKind, sChildExpr) ::= "{.kind = <sChildKind>, .u.<sChildName> = <sChildExpr>} /* init:291 */"
