group c_equal;


JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if ret then
    <soNestedPart>
<endif>
>>

JoinItems2_ret(sPart, sNestedPart) ::= <<
<sPart>
if (ret) {
    <sNestedPart>
}
>>

JoinItems2_ret_result(sPart, sNestedPart) ::= <<
<sPart>
if (ret) {
    <sNestedPart>
}
>>



/*
*****************************************************************************************
 E Q U A L      F U N C T I O N S
*****************************************************************************************
*/
PrintEqualDefintionPrimitive(sFuncName, sTypeDefName) ::= <<
>>

PrintEqualDefintionComposite(sFuncName, sTypeDefName) ::= <<
>>

PrintEqualPrimitive(sFuncName, sTypeDefName, sContent) ::= <<
def <sFuncName>(val1: <sTypeDefName>, val2: <sTypeDefName>): Boolean =
{
    return <sContent>
}
>>



PrintEqualComposite(sFuncName, sTypeDefName, sContent, arrsLocalVars) ::= <<
def <sFuncName>(pVal1: <sTypeDefName>, pVal2: <sTypeDefName>): Boolean =
{
    var ret: Boolean = true
    <arrsLocalVars; separator="\n">

    <sContent>
    return ret
}
>>

equalTypeAssignment_def(sVarName1, sVarName2, sStar, sFuncName, sTypeDefName) ::= << >>

equalTypeAssignment(sVarName1, sVarName2, sStar, sFuncName, sTypeDefName, sContent, arrsLocalVars, bExpression, bUnreferenced) ::= <<
def <sFuncName>(<sVarName1>: <sTypeDefName>, <sVarName2>: <sTypeDefName>): Boolean =
{
    <if(bUnreferenced)>
    <sVarName1>
    <sVarName2>
    <endif>
    
    <if(bExpression)>
    return <sContent>

    <else>
    var ret: Boolean = true
    <arrsLocalVars; separator="\n">

    <sContent>
    return ret

    <endif>
}
>>


isEqual_Primitive(p1, p2) ::= "<p1> == <p2>"

isEqual_String(p1, p2) ::= "<p1>.sameElements(<p2>)"


isEqual_Integer(p1, p2) /*nogen*/::= "ret = (<p1> == <p2>)"

isEqual_Enumerated(p1, p2) /*nogen*/::= "<isEqual_Integer(p1=p1,p2=p2)>"


isEqual_Boolean(p1, p2) /*nogen*/::= "ret = ( (<p1> && <p2>) || (!<p1> && !<p2>))"

isEqual_Real(p1, p2) ::= "<p1> == <p2>"

isEqual_IA5String(p1, p2) /*nogen*/::= "ret = (strcmp(<p1>, <p2>) ==0)"

isEqual_NumericString(p1, p2) /*nogen*/::= "<isEqual_IA5String(p1=p1, p2=p2)>"
isEqual_NullType()/*nogen*/ ::= "ret = true"

isEqual_BitString(p1,p2,bIsFixedSize, nFixedSize) ::= <<
<if(!bIsFixedSize)>
    (<p1>nCount == <p2>nCount) && 
    (<p1>arr.slice(0,(<p1>nCount/8).toInt).sameElements(<p2>arr.slice(0,(<p1>nCount/8).toInt))) && 
    (if <p1>nCount % 8 > 0 then (<p1>arr(<p1>nCount.toInt/8) \>> (8-<p1>nCount % 8) == <p2>arr(<p1>nCount.toInt/8)\>>(8-<p1>nCount % 8) ) else true)

<else>
    (<p1>arr.slice(0,<nFixedSize>/8).sameElements(<p2>arr.slice(0,<nFixedSize>/8))) && 
    (if (<nFixedSize> % 8) > 0 then (<p1>arr(<nFixedSize>/8)\>>(8-<nFixedSize> % 8) == <p2>arr(<nFixedSize>/8)\>>(8-<nFixedSize> % 8) ) else true)

<endif>
>>



isEqual_OctetString(p1,p2, bIsFixedSize, nFixedSize) ::= <<
<if(!bIsFixedSize)>
    (<p1>nCount == <p2>nCount) && (<p1>arr.sameElements(<p2>arr))
<else>
    <p1>arr.sameElements(<p2>arr)
<endif>    
>>

isObjectIdentifier_equal(p1, p2) ::= <<
ObjectIdentifier_equal(<p1>, <p2>)
>>



isEqual_Choice_Child(choiceTypeDefName, sCid, sInnerStatement, sTmpVarName1, sTmpVarName2) ::= <<
case (<choiceTypeDefName>.<sCid>(<sTmpVarName1>), <choiceTypeDefName>.<sCid>(<sTmpVarName2>)) =>
    <sInnerStatement>
>>

isEqual_Choice(p1,p2, sAccess, arrsChildren) ::= <<
(<p1>, <p2>) match {
    <arrsChildren: {ch|<ch>}; separator="\n">
    case (_, _) =>
        ret = false
}
>>

isEqual_Sequence_child(p1, p2, sAcc,  bIsOptional, sChName, soInnerStatement) ::= <<
<if(bIsOptional)>
ret = (<p1><sAcc>exist.<sChName> == <p2><sAcc>exist.<sChName>)
<if(soInnerStatement)>
if (ret && <p1><sAcc>exist.<sChName>) then
    <soInnerStatement>

<endif>
<else>
<soInnerStatement>

<endif>
>>



isEqual_SequenceOf_var_size(p1,p2, sAcc, i, soInnerStatement) ::= <<
ret = (<p1><sAcc>nCount == <p2><sAcc>nCount)
<if (soInnerStatement)>
<i> = 0
while ret && <i> \< <p1><sAcc>nCount do
    <soInnerStatement>
    <i> += 1


<endif>
>>

isEqual_SequenceOf_fix_size(p1,p2, sAcc, i, nFixedSize, sInnerStatement) ::= <<
for(<i> = 0; ret && <i> \< <nFixedSize>; <i>++)
{
    <sInnerStatement>
}

>>

call_base_type_func(p1, p2, sFuncName) ::= "<sFuncName>(<p1>, <p2>)"

makeExpressionToStatement(sIsValidExp) ::= <<
ret = <sIsValidExp>
>>


callChildEqualFunc(p1, p2,  sChildEqualFuncName) ::= <<
ret = <sChildEqualFuncName>(<p1>, <p2>)
>>
