group scala_acn;

getStringSize(p) ::= "<p>.indexOf(0x00)"

getSizeableSize(p, sAcc) ::= "<p><sAcc>nCount // TODO acn:5"

EmitTypeAssignment_def_err_code(sErrCode, nErrValue, soErrorCodeComment) ::= <<
@inline @cCode.inline val <sErrCode>: Int = <nErrValue> /* <soErrorCodeComment> */
>>

EmitAcnParameter(sName, sType) ::= "<sType> <sName> /*TODO acn:11 */"


EmitTypeAssignment_primitive_def_encode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInACN, nMaxBitsInACN, arrsAcnPrms, soSparkAnnotations) ::= <<
<arrsErrcodes; separator="\n">
@inline @cCode.inline val <sTypeDefName>_REQUIRED_BYTES_FOR_ACN_ENCODING = <nMaxBytesInACN>
@inline @cCode.inline val <sTypeDefName>_REQUIRED_BITS_FOR_ACN_ENCODING = <nMaxBitsInACN>
>>

EmitTypeAssignment_primitive_encode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitialExp, arrsAcnPrms, arrsAcnParamNames, bEmptyEncodingSpace, bBsIsUnreferenced, bVarNameIsUnreferenced, soInitFuncName) ::= <<
def <sFuncName>(<if(bVarNameIsUnreferenced)>@annotation.unused <endif><sVarName>: <sTypeDefName>, <if(bBsIsUnreferenced)>@annotation.unused <endif>codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    <arrsLocalVariables:{lv|<lv>}; separator="\n">
    <if(soIValidFuncName)>
    if bCheckConstraints then
        <soIValidFuncName>(<sVarName>) match
            case Left(l) => return Left(l)
            case Right(_) =>
    <sContent>
    <else>
    <sContent>
    <endif>
    Right(0)
}
>>

EmitTypeAssignment_primitive_def_decode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInACN, nMaxBitsInACN, arrsAcnPrms, soSparkAnnotations) ::= <<
<arrsErrcodes; separator="\n">
>>

EmitTypeAssignment_primitive_decode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitialExp, arrsAcnPrms, arrsAcnParamNames, bEmptyEncodingSpace, bBsIsUnreferenced, bVarNameIsUnreferenced, soInitFuncName) ::= <<
def <sFuncName>(<if(bBsIsUnreferenced)>@annotation.unused <endif>codec: ACN): Either[ErrorCode, <sTypeDefName>] =
{
    <arrsLocalVariables:{lv|<lv>}; separator="\n">

    <sContent>

    <if(soIValidFuncName)>
    <soIValidFuncName>(<sVarName>) match
        case Left(l) => Left(l)
        case _ => Right(<sVarName>)
    <else>
    Right(<sVarName>)
    <endif>
}
>>

A(sErrCode) /*nogen*/ ::= ""
// TODO
MF(soMF) ::= /*nogen*/ <<
<if(soMF)>
<p> = <soMF>_decode(<p>)
<endif>
>>

loopFixedItem (i, fixedSize,  sInternalItem)::= /*nogen*/ <<
<i> = 0
while <i> \< <fixedSize>.asInstanceOf[Int] do
    <sInternalItem>
    <i> += 1
>>

alignToNext_encode(sMainBody, sAlignmentValue, nAlignmentValue) ::= <<
codec.alignTo<sAlignmentValue>()
<sMainBody>
>>

alignToNext_decode(sMainBody, sAlignmentValue, nAlignmentValue) ::= <<
codec.alignTo<sAlignmentValue>()
<sMainBody>
>>

PositiveInteger_ConstSize_encode(p, sSsuffix, sErrCode, nFixedSize, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_PositiveInteger_ConstSize(<if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nFixedSize>)"
PositiveInteger_ConstSize_decode(p, sSsuffix, sErrCode, nFixedSize, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_PositiveInteger_ConstSize<sSsuffix>(<nFixedSize>)
<MF(soMF)>
>>

PositiveInteger_ConstSize_8_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_PositiveInteger_ConstSize_8(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
PositiveInteger_ConstSize_8_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_PositiveInteger_ConstSize_8<sSsuffix>()
<MF(soMF)>
>>

PositiveInteger_ConstSize_big_endian_16_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_PositiveInteger_ConstSize_big_endian_16(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
PositiveInteger_ConstSize_big_endian_16_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_PositiveInteger_ConstSize_big_endian_16<sSsuffix>()
<MF(soMF)>
>>

PositiveInteger_ConstSize_big_endian_32_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
PositiveInteger_ConstSize_big_endian_32_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32<sSsuffix>()
<MF(soMF)>
>>

PositiveInteger_ConstSize_big_endian_64_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_PositiveInteger_ConstSize_big_endian_64(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
PositiveInteger_ConstSize_big_endian_64_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_PositiveInteger_ConstSize_big_endian_64<sSsuffix>()
<MF(soMF)>
>>

PositiveInteger_ConstSize_little_endian_16_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_PositiveInteger_ConstSize_little_endian_16(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
PositiveInteger_ConstSize_little_endian_16_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_PositiveInteger_ConstSize_little_endian_16<sSsuffix>()
<MF(soMF)>
>>

PositiveInteger_ConstSize_little_endian_32_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_PositiveInteger_ConstSize_little_endian_32(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
PositiveInteger_ConstSize_little_endian_32_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_PositiveInteger_ConstSize_little_endian_32<sSsuffix>()
<MF(soMF)>
>>

PositiveInteger_ConstSize_little_endian_64_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_PositiveInteger_ConstSize_little_endian_64(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
PositiveInteger_ConstSize_little_endian_64_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_PositiveInteger_ConstSize_little_endian_64<sSsuffix>()
<MF(soMF)>
>>

PositiveInteger_VarSize_LengthEmbedded_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin) ::= "codec.enc_Int_PositiveInteger_VarSize_LengthEmbedded(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
PositiveInteger_VarSize_LengthEmbedded_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin) ::= <<
val <p> = codec.dec_Int_PositiveInteger_VarSize_LengthEmbedded<sSsuffix>()
<MF(soMF)>
>>

TwosComplement_ConstSize_encode(p, sSsuffix, sErrCode, soMF, soMFM, nFixedSize, nUperMin, nUperMax) ::= "codec.enc_Int_TwosComplement_ConstSize(<if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nFixedSize>)"
TwosComplement_ConstSize_decode(p, sSsuffix, sErrCode, soMF, soMFM, nFixedSize, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_TwosComplement_ConstSize<psSsuffix>(<nFixedSize>)
<MF(soMF)>
>>

TwosComplement_ConstSize_8_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_TwosComplement_ConstSize_8(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
TwosComplement_ConstSize_8_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_TwosComplement_ConstSize_8<sSsuffix>()
<MF(soMF)>
>>

TwosComplement_ConstSize_big_endian_16_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_TwosComplement_ConstSize_big_endian_16(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
TwosComplement_ConstSize_big_endian_16_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_TwosComplement_ConstSize_big_endian_16<sSsuffix>()
>>

TwosComplement_ConstSize_big_endian_32_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_TwosComplement_ConstSize_big_endian_32(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
TwosComplement_ConstSize_big_endian_32_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_TwosComplement_ConstSize_big_endian_32<sSsuffix>()
<MF(soMF)>
>>

TwosComplement_ConstSize_big_endian_64_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_TwosComplement_ConstSize_big_endian_64(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
TwosComplement_ConstSize_big_endian_64_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_TwosComplement_ConstSize_big_endian_64<sSsuffix>()
<MF(soMF)>
>>

TwosComplement_ConstSize_little_endian_16_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_TwosComplement_ConstSize_little_endian_16(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
TwosComplement_ConstSize_little_endian_16_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_TwosComplement_ConstSize_little_endian_16<sSsuffix>()
<MF(soMF)>
>>

TwosComplement_ConstSize_little_endian_32_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_TwosComplement_ConstSize_little_endian_32(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
TwosComplement_ConstSize_little_endian_32_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_TwosComplement_ConstSize_little_endian_32<sSsuffix>()
<MF(soMF)>
>>

TwosComplement_ConstSize_little_endian_64_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_TwosComplement_ConstSize_little_endian_64(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
TwosComplement_ConstSize_little_endian_64_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_TwosComplement_ConstSize_little_endian_64<sSsuffix>()
<MF(soMF)>
>>

TwosComplement_VarSize_LengthEmbedded_encode(p, sSsuffix, sErrCode, soMF, soMFM) ::= "codec.enc_Int_TwosComplement_VarSize_LengthEmbedded(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
TwosComplement_VarSize_LengthEmbedded_decode(p, sSsuffix, sErrCode, soMF, soMFM) ::= <<
val <p> = codec.dec_Int_TwosComplement_VarSize_LengthEmbedded<sSsuffix>()
<MF(soMF)>
>>

BCD_ConstSize_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, nNibbles) ::= "codec.enc_Int_BCD_ConstSize(<if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nNibbles>)"
BCD_ConstSize_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, nNibbles) ::= <<
val <p> = codec.dec_Int_BCD_ConstSize<sSsuffix>(<nNibbles>)
<MF(soMF)>
>>

BCD_VarSize_LengthEmbedded_encode(p, sSsuffix, sErrCode, soMF, soMFM) ::= "codec.enc_Int_BCD_VarSize_LengthEmbedded(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
BCD_VarSize_LengthEmbedded_decode(p, sSsuffix, sErrCode, soMF, soMFM) ::= <<
val <p> = codec.dec_Int_BCD_VarSize_LengthEmbedded<sSsuffix>()
<MF(soMF)>
>>

BCD_VarSize_NullTerminated_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= "codec.enc_Int_BCD_VarSize_NullTerminated(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
BCD_VarSize_NullTerminated_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax) ::= <<
val <p> = codec.dec_Int_BCD_VarSize_NullTerminated<sSsuffix>()
<MF(soMF)>
>>

ASCII_ConstSize_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, nSizeInBytes) ::= "codec.enc_SInt_ASCII_ConstSize(<if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nSizeInBytes>) "
ASCII_ConstSize_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, nSizeInBytes) ::= <<
val <p> = codec.dec_SInt_ASCII_ConstSize<sSsuffix>(<nSizeInBytes>)
<MF(soMF)>
>>

ASCII_VarSize_LengthEmbedded_encode(p, sSsuffix, sErrCode, soMF, soMFM) ::= "codec.enc_SInt_ASCII_VarSize_LengthEmbedded(<if(soMF)><soMF>_encode(<p>)<else><p><endif>)"
ASCII_VarSize_LengthEmbedded_decode(p, sSsuffix, sErrCode, soMF, soMFM) ::= <<
val <p> = codec.dec_SInt_ASCII_VarSize_LengthEmbedded<sSsuffix>()
<MF(soMF)>
>>

ASCII_VarSize_NullTerminated_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, arruNullBytes) ::= <<
codec.enc_SInt_ASCII_VarSize_NullTerminated(<if(soMF)><soMF>_encode(<p>)<else><p><endif>, (byte[]){<arruNullBytes; separator=", ">}, <arruNullBytes.Length>)
>>

ASCII_VarSize_NullTerminated_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, arruNullBytes) ::= <<
val <p> = codec.dec_SInt_ASCII_VarSize_NullTerminated<sSsuffix>((byte[]){<arruNullBytes; separator=", ">}, <arruNullBytes.Length>)
<MF(soMF)>
>>

ASCII_UINT_ConstSize_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, nSizeInBytes) ::= <<
codec.enc_UInt_ASCII_ConstSize(<if(soMF)><soMF>_encode(<p>)<else><p><endif>, <nSizeInBytes>)
>>

ASCII_UINT_ConstSize_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, nSizeInBytes) ::= <<
val <p> = codec.dec_UInt_ASCII_ConstSize<sSsuffix>(<nSizeInBytes>)
<MF(soMF)>
>>

ASCII_UINT_VarSize_NullTerminated_encode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, arruNullBytes) ::= <<
codec.enc_UInt_ASCII_VarSize_NullTerminated(<if(soMF)><soMF>_encode(<p>)<else><p><endif>, (byte[]){<arruNullBytes; separator=", ">}, <arruNullBytes.Length>)
>>

ASCII_UINT_VarSize_NullTerminated_decode(p, sSsuffix, sErrCode, soMF, soMFM, nUperMin, nUperMax, arruNullBytes) ::= <<
val <p> = codec.dec_UInt_ASCII_VarSize_NullTerminated<sSsuffix>(<p>, (byte[]){<arruNullBytes; separator=", ">}, <arruNullBytes.Length>)
<MF(soMF)>
>>

Real_32_big_endian_encode(p, sSuffix, sErrCode) ::= "codec.enc_Real_IEEE754_32_big_endian(<p>.toFloat)"
Real_32_big_endian_decode(p, sSuffix, sErrCode) ::= <<
val <p> = codec.dec_Real_IEEE754_32_big_endian<sSsuffix>()
>>

Real_64_big_endian_encode(p, sErrCode) ::= "codec.enc_Real_IEEE754_64_big_endian(<p>)"
Real_64_big_endian_decode(p, sErrCode) ::= <<
val <p> = codec.dec_Real_IEEE754_64_big_endian()
>>

Real_32_little_endian_encode(p, sSuffix, sErrCode) ::= "codec.enc_Real_IEEE754_32_little_endian(<p>)"
Real_32_little_endian_decode(p, sSuffix, sErrCode) ::= <<
val <p> = codec.dec_Real_IEEE754_32_little_endian<sSsuffix>()
>>

Real_64_little_endian_encode(p, sErrCode) ::= "codec.enc_Real_IEEE754_64_little_endian(<p>)"
Real_64_little_endian_decode(p, sErrCode) ::= <<
val <p> = codec.dec_Real_IEEE754_64_little_endian()
>>


Boolean_encode(p, ptr, bEncValIsTrue, nSize, arruTrueValueAsByteArray, arruFalseValueAsByteArray, arrsBits, sErrCode) ::= <<
locally {
    val true_data: Array[UByte] = Array(<arruTrueValueAsByteArray:{b|0x<b;format="X2">.asInstanceOf[UByte]}; separator=", ">)
    val false_data: Array[UByte] = Array(<arruFalseValueAsByteArray:{b|0x<b;format="X2">.asInstanceOf[UByte]}; separator=", ">)
    codec.appendBitsMSBFirst(if <p> then true_data else false_data, <nSize>)
}
>>

Boolean_decode(p, ptr, bEncValIsTrue, nSize, arruTrueValueAsByteArray, arruFalseValueAsByteArray, arrsBits, sErrCode) ::= <<
val <p> = {
    <if(bEncValIsTrue)>
    val tmp: Array[UByte] = Array(<arruTrueValueAsByteArray:{b|0x<b;format="X2">.asInstanceOf[UByte]}; separator=", ">)
    <else>
    val tmp: Array[UByte] = Array(<arruFalseValueAsByteArray:{b|0x<b;format="X2">.asInstanceOf[UByte]}; separator=", ">)
    <endif>
    val x = codec.BitStream_ReadBitPattern(tmp, <nSize>)
    <if(!bEncValIsTrue)>
    !x
    <else>
    x
    <endif>
}
>>

Null_declare(p) ::= "val <p>: NullType = 0"

Null_pattern_encode(p, arruNullValueAsByteArray, nSize, arrsBits, sErrCode, bSavePosition) ::= <<
<if(arruNullValueAsByteArray)>
locally {
    val tmp: Array[Byte] = Array(<arruNullValueAsByteArray:{b|0x<b;format="X2">.asInstanceOf[Byte]}; separator=",">)
    codec.appendBitsMSBFirst(tmp, <nSize>)
}
<endif>
>>

Null_pattern_decode(p, arruNullValueAsByteArray, nSize, arrsBits, sErrCode, bSavePosition) ::= <<
<if(bSavePosition)>
codec.BitStream_ReadBitPattern_ignore_value(<nSize>)
val <p>: NullType = 0
<else>
<if(arruNullValueAsByteArray)>
locally {
    val tmp: Array[Byte] = Array(<arruNullValueAsByteArray:{b|0x<b;format="X2">.asInstanceOf[Byte]}; separator=",">)
    if !codec.BitStream_ReadBitPattern(tmp, <nSize>) then
        return Left(<sErrCode>)

    <A(sErrCode)>
}
val <p>: NullType = 0
<endif>
<endif>
>>

Null_pattern2_encode(p, arruNullValueAsByteArray, nSize, arrsBits, sErrCode, bSavePosition) ::= <<
<Null_pattern_encode(p=p, arruNullValueAsByteArray=arruNullValueAsByteArray, nSize=nSize, arrsBits=arrsBits, sErrCode=sErrCode, bSavePosition=bSavePosition)>
>>
Null_pattern2_decode(p, arruNullValueAsByteArray, nSize, arrsBits, sErrCode, bSavePosition) ::= <<
<Null_pattern_decode(p=p, arruNullValueAsByteArray=arruNullValueAsByteArray, nSize=nSize, arrsBits=arrsBits, sErrCode=sErrCode, bSavePosition=bSavePosition)>
>>

Enumerated_item_encode(p, sName, sEnumHolder, nItemIdxOrVal, sIntVal) ::= <<
case <sName> => <nItemIdxOrVal>
>>
Enumerated_item_decode(p, sName, sEnumHolder, nItemIdxOrVal, sIntVal) ::= <<
case <nItemIdxOrVal> => <sName>
>>

EnumeratedEncIdx_encode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, sActualCodecFunc, sIntVal) ::= <<
<sActualCodecFunc>
>>

EnumeratedEncIdx_decode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, sActualCodecFunc, sIntVal) ::= <<
<sActualCodecFunc>
>>

EnumeratedEncValues_encode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, sActualCodecFunc, sErrCode, sFirstItemName, sIntVal) ::= <<
val <sIntVal> = <p> match
    <arrsItem; separator="\n">

<sActualCodecFunc>
>>

EnumeratedEncValues_decode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, sActualCodecFunc, sErrCode, sFirstItemName, sIntVal) ::= <<
<sActualCodecFunc>
val <p> = <sIntVal> match
    <arrsItem; separator="\n">
    case _ => return Left(<sErrCode>)
>>

/* Strings */
Acn_String_Ascii_FixSize_encode(p, sErrCode, nAsn1Max) ::= "codec.enc_String_Ascii_FixSize(<nAsn1Max>, <p>)"
Acn_String_Ascii_FixSize_decode(p, sErrCode, nAsn1Max) ::= <<
val <p> = codec.dec_String_Ascii_FixSize(<nAsn1Max>) match
    case None() => return Left(<sErrCode>)
    case Some(x) => x
>>

Acn_String_Ascii_Null_Terminated_encode(p, sErrCode, nAsn1Max, arruNullBytes) ::= <<
codec.enc_String_Ascii_Null_Terminated_mult(<nAsn1Max>, Array({<arruNullBytes; separator=", ">}), <arruNullBytes.Length>, <p>)
>>

Acn_String_Ascii_Null_Terminated_decode(p, sErrCode, nAsn1Max, arruNullBytes) ::= <<
val <p> = codec.dec_String_Ascii_Null_Terminated_mult(<nAsn1Max>, Array({<arruNullBytes; separator=", ">}), <arruNullBytes.Length>) match
    case NoneMut() => return Left(<sErrCode>)
    case SomeMut(x) => x
>>

Acn_String_Ascii_External_Field_Determinant_encode(p, sErrCode, nAsn1Max, sExtFld) ::= "codec.enc_String_Ascii_External_Field_Determinant(<nAsn1Max>, <p>)"
Acn_String_Ascii_External_Field_Determinant_decode(p, sErrCode, nAsn1Max, sExtFld) ::= <<
val <p> = codec.dec_String_Ascii_External_Field_Determinant(<nAsn1Max>, <sExtFld>) match
    case None() => return Left(<sErrCode>)
    case Some(x) => x
>>

Acn_String_Ascii_Internal_Field_Determinant_encode(p, sErrCode, nAsn1Max, nAsn1Min, nInternalLengthDeterminantSizeInBits) ::= <<
codec.enc_String_Ascii_Internal_Field_Determinant(<nAsn1Max>, <nAsn1Min>, <p>)
>>

Acn_String_Ascii_Internal_Field_Determinant_decode(p, sErrCode, nAsn1Max, nAsn1Min, nInternalLengthDeterminantSizeInBits) ::= <<
val <p> = codec.dec_String_Ascii_Internal_Field_Determinant(<nAsn1Max>, <nAsn1Min>) match
    case None() => return Left(<sErrCode>)
    case Some(x) => x
>>

PrintAlphabet2(arrnCharSet) /*nogen*/ ::= <<
val allowedCharSet: Array[Byte] = Array(<arrnCharSet:{ch|0x<ch;format="X2">}; wrap, anchor, separator=",">)
>>

Acn_String_CharIndex_FixSize_encode(p, sErrCode, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, td/*:FE_StringTypeDefinition*/, nCharSize) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
codec.enc_String_CharIndex_FixSize(<nAsn1Max>, allowedCharSet, <nCharSetSize>, <p>)
>>

Acn_String_CharIndex_FixSize_decode(p, sErrCode, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, td/*:FE_StringTypeDefinition*/, nCharSize) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
val <p> = codec.dec_String_CharIndex_FixSize(<nAsn1Max>, allowedCharSet, <nCharSetSize>) match
    case None() => return Left(<sErrCode>)
    case Some(x) => x
>>

Acn_String_CharIndex_External_Field_Determinant_encode(p, sErrCode, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, sExtFld, td/*:FE_StringTypeDefinition*/, nCharSize) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
codec.enc_String_CharIndex_External_Field_Determinant(<nAsn1Max>, allowedCharSet, <nCharSetSize>, <p>)
>>

Acn_String_CharIndex_External_Field_Determinant_decode(p, sErrCode, nAsn1Max, arrnAlphabetAsciiCodes, nCharSetSize, sExtFld, td/*:FE_StringTypeDefinition*/, nCharSize) ::= <<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
val <p> = codec.dec_String_CharIndex_External_Field_Determinant(<nAsn1Max>, allowedCharSet, <nCharSetSize>, <sExtFld>) match
    case None() => return Left(<sErrCode>)
    case Some(x) => x
>>


Acn_IA5String_CharIndex_External_Field_Determinant_encode(p, sErrCode, nAsn1Max, sExtFld, td/*:FE_StringTypeDefinition*/, nCharSize) ::= <<
codec.enc_IA5String_CharIndex_External_Field_Determinant(<nAsn1Max>, <p>)
>>

Acn_IA5String_CharIndex_External_Field_Determinant_decode(p, sErrCode, nAsn1Max, sExtFld, td/*:FE_StringTypeDefinition*/, nCharSize) ::= <<
val <p> = codec.dec_IA5String_CharIndex_External_Field_Determinant(<nAsn1Max>, <sExtFld>)
>>


oct_external_field_encode(sTypedefName, p, sAcc, noSizeMin, nSizeMax, sExtFld, nAlignSize, sErrCode) ::= <<
codec.encodeOctetString_no_length(<p><sAcc>arr, <p><sAcc>nCount.toInt)
>>

oct_external_field_decode(sTypedefName, p, sAcc, noSizeMin, nSizeMax, sExtFld, nAlignSize, sErrCode) ::= <<
val <p> =
    if (<if(noSizeMin)>(<noSizeMin>\<=<sExtFld>) && <endif>(<sExtFld>\<=<nSizeMax>)) then
        <sTypedefName>(<sExtFld>.toLong, codec.decodeOctetString_no_length(<sExtFld>.toInt))
    else return Left(<sErrCode>)
>>

oct_external_field_fix_size_encode(sTypedefName, p, sAcc, noSizeMin, nSizeMax, sExtFld, nAlignSize, sErrCode) ::= <<
codec.encodeOctetString_no_length(<p><sAcc>arr, <nSizeMax>)
>>

oct_external_field_fix_size_decode(sTypedefName, p, sAcc, noSizeMin, nSizeMax, sExtFld, nAlignSize, sErrCode) ::= <<
val <p> =
    if (<if(noSizeMin)>(<noSizeMin>\<=<sExtFld>) && <endif>(<sExtFld>\<=<nSizeMax>)) then
        <sTypedefName>(codec.decodeOctetString_no_length(<nSizeMax>))
    else return Left(<sErrCode>)
>>


sqf_external_field_encode(sTypeDefName, p, sAcc, i, sInternalItem, noSizeMin, nSizeMax, sExtFld, nAlignSize, sErrCode, nIntItemMinSize, nIntItemMaxSize, sChildInitExpr) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "nCount"])>
>>

sqf_external_field_decode(sTypeDefName, p, sAcc, i, sInternalItem, noSizeMin, nSizeMax, sExtFld, nAlignSize, sErrCode, nIntItemMinSize, nIntItemMaxSize, sChildInitExpr) ::= <<
val <p> =
    if (<if(noSizeMin)>(<noSizeMin>\<=<sExtFld>) && <endif>(<sExtFld>\<=<nSizeMax>)) then
        val <p> = <sTypeDefName>(<sExtFld>.toInt, Array.fill(<sExtFld>.toInt)(<sChildInitExpr>))
        <loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "nCount"])>
        <p>
    else return Left(<sErrCode>)
>>

sqf_external_field_fix_size_encode(sTypeDefName, p, sAcc, i, sInternalItem, noSizeMin, nSizeMax, sExtFld, nAlignSize, sErrCode, nIntItemMinSize, nIntItemMaxSize, sChildInitExpr) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[nSizeMax])>
>>

sqf_external_field_fix_size_decode(sTypeDefName, p, sAcc, i, sInternalItem, noSizeMin, nSizeMax, sExtFld, nAlignSize, sErrCode, nIntItemMinSize, nIntItemMaxSize, sChildInitExpr) ::= <<
val <p> =
    if (<if(noSizeMin)>(<noSizeMin>\<=<sExtFld>) && <endif>(<sExtFld>\<=<nSizeMax>)) then
        val <p> = <sTypeDefName>(Array.fill(<sExtFld>.toInt)(<sChildInitExpr>))
        <loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[nSizeMax])>
        <p>
    else return Left(<sErrCode>)
>>

oct_sqf_null_terminated_encode(p, sAcc, i, sInternalItem, noSizeMin, nSizeMax, arruNullBytes, nBitPatternLength, sErrCode, nIntItemMinSize, nIntItemMaxSize) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "nCount"])>
codec.appendBitsMSBFirst(Array({<arruNullBytes; separator=", ">}), <nBitPatternLength>)
>>

oct_sqf_null_terminated_decode(p, sAcc, i, sInternalItem, noSizeMin, nSizeMax, arruNullBytes, nBitPatternLength, sErrCode, nIntItemMinSize, nIntItemMaxSize) ::= <<
// TODO: check if it works as intended
<i> = 0

var checkBitPatternPresentResult = codec.checkBitPatternPresent(Array({<arruNullBytes; separator=", ">}), <nBitPatternLength>)
while <i> \< <nSizeMax> && !checkBitPatternPresentResult.getOrElse(true) do
    <sInternalItem>
    <i> += 1
    checkBitPatternPresentResult = codec.checkBitPatternPresent(Array({<arruNullBytes; separator=", ">}), <nBitPatternLength>)

if (<i> == <nSizeMax>) && !checkBitPatternPresentResult.getOrElse(true) then
    checkBitPatternPresentResult = codec.checkBitPatternPresent(Array({<arruNullBytes; separator=", ">}), <nBitPatternLength>)

if checkBitPatternPresentResult.isEmpty then
    return Left(<sErrCode>)
else if checkBitPatternPresentResult.get then
    <p><sAcc>nCount = <i>
>>

bit_string_external_field_encode(sTypeDefName, p, sErrCode, sAcc, noSizeMin, nSizeMax, sExtFld) ::= <<
codec.appendBitsMSBFirst(<p><sAcc>arr, <p><sAcc>nCount)
>>

bit_string_external_field_decode(sTypeDefName, p, sErrCode, sAcc, noSizeMin, nSizeMax, sExtFld) ::= <<
val <p> =
    if <if(noSizeMin)>(<noSizeMin>\<=<sExtFld>) && <endif>(<sExtFld>\<=<nSizeMax>) then
        <sTypedefName>(<sExtFld>, codec.readBits(<sExtFld>))
    else return Left(<sErrCode>)
>>

bit_string_external_field_fixed_size_encode(sTypeDefName, p, sErrCode, sAcc, noSizeMin, nSizeMax, sExtFld) ::= <<
codec.appendBitsMSBFirst(<p><sAcc>arr, <nSizeMax>)
>>

bit_string_external_field_fixed_size_decode(sTypeDefName, p, sErrCode, sAcc, noSizeMin, nSizeMax, sExtFld) ::= <<
val <p> =
    if <if(noSizeMin)>(<noSizeMin>\<=<sExtFld>) && <endif>(<sExtFld>\<=<nSizeMax>) then
        <sTypeDefName>(codec.readBits(<nSizeMax>))
    else return Left(<sErrCode>)
>>

bit_string_null_terminated_encode(sTypeDefName, p, sErrCode, sAcc, i, noSizeMin, nSizeMax, arruNullBytes, nBitPatternLength) ::= <<
codec.appendBitsMSBFirst(<p><sAcc>arr, <p><sAcc>arr.length*8) // TODO: re-introduce nCount?  -> codec.appendBitsMSBFirst(<p><sAcc>arr, <p><sAcc>nCount)
codec.appendBitsMSBFirst(Array({<arruNullBytes; separator=", ">}), <nBitPatternLength>)
>>

bit_string_null_terminated_decode(sTypeDefName, p, sErrCode, sAcc, i, noSizeMin, nSizeMax, arruNullBytes, nBitPatternLength) ::= <<
val <p> = codec.readBits_nullterminated(Array({<arruNullBytes; separator=", ">}), <nBitPatternLength>, <nSizeMax>) match
    case NoneMut() => return Left(<sErrCode>)
    case SomeMut(arr, i) => <sTypeDefName>(arr)
>>

RefTypeParam_tmpVar(sName, sTypeDecl) ::= "<sTypeDecl> <sName>"

ReferenceType1_encode(p, sName, bAcnEncodeFuncRequiresResult, arrsArgs, arrsLocalPrms) ::= <<
<arrsLocalPrms, arrsArgs: {lp,arg|<if(arg)><lp> = <arg>;// 3031<endif>}; separator="\n">
<sName>_ACN_Encode(<p>, codec, pErrCode, FALSE<if(arrsArgs)>, <arrsLocalPrms; separator=", "><endif>) match
    case Left(err) => return Left(err)
    case Right(_) =>
>>

ReferenceType1_decode(p, sName, bAcnEncodeFuncRequiresResult, arrsArgs, arrsLocalPrms) ::= <<
<arrsLocalPrms, arrsArgs: {lp,arg|<if(arg)><lp> = <arg>; // 3030<endif>}; separator="\n">
<sName>_ACN_Decode(<p>, codec, pErrCode<if(arrsArgs)>, <arrsLocalPrms; separator=", "><endif>) match
    case Left(err) => return Left(err)
    case Right(_) =>
>>


/* SEQUENCE*/


sequence_presence_optChild_encode(p, sAcc, sChName, soExistVar, sErrCode) ::= <<
codec.appendBit(<p><sAcc><sChName>.isDefined)
>>

sequence_presence_optChild_decode(p, sAcc, sChName, soExistVar, sErrCode) ::= <<
<soExistVar> = codec.readBit()
>>

sequence_presence_optChild_pres_acn_expression_encode(p, sAcc, sChName, sAcnExpression, soExistVar, sErrCode) ::= <<
if <p><sAcc><sChName>.isDefined != <sAcnExpression> then
    return Left(<sErrCode>)
>>
sequence_presence_optChild_pres_acn_expression_decode(p, sAcc, sChName, sAcnExpression, soExistVar, sErrCode) ::= <<
<soExistVar> = <sAcnExpression>
>>

sequence_presence_optChild_pres_bool_encode(p, sAcc, sChName, sExtFldName) ::= ""
sequence_presence_optChild_pres_bool_decode(p, sAcc, sChName, sExtFldName) ::= ""

sequence_presence_optChild_pres_int_encode(p, sAcc, sChName, sExtFldName, nIntVal) ::= ""
sequence_presence_optChild_pres_int_decode(p, sAcc, sChName, sExtFldName, nIntVal) ::= ""

sequence_presence_optChild_pres_str_encode(p, sAcc, sChName, sExtFldName, sVal) ::= ""
sequence_presence_optChild_pres_str_decode(p, sAcc, sChName, sExtFldName, sVal) ::= ""

sequence_save_bitStream_start_encode(sBitStreamPositionsLocalVar) ::=<<
<sBitStreamPositionsLocalVar> = pBitStrm // save the initial position of the bit stream at
>>

sequence_save_bitStream_start_decode(sBitStreamPositionsLocalVar) ::=<<
<sBitStreamPositionsLocalVar> = pBitStrm // save the initial position of the bit stream
>>

sequence_save_bitstream_encode(sBitStreamPositionsLocalVar, sChName) ::=<<
<sBitStreamPositionsLocalVar>.<sChName> = pBitStrm // save position of the bit stream
>>

sequence_save_bitstream_decode(sBitStreamPositionsLocalVar, sChName) ::=<<
<sBitStreamPositionsLocalVar>.<sChName> = pBitStrm // save position of the bit stream
>>

sequence_acn_child_encode(sChName, sChildContent, sErrCode, soSaveBitStrmPosStatement) ::= <<
/* Encode <sChName> */
<soSaveBitStrmPosStatement>
<sChildContent>
>>

sequence_acn_child_decode(sChName, sChildContent, sErrCode, soSaveBitStrmPosStatement) ::= <<
/* Decode <sChName> */
<soSaveBitStrmPosStatement>
<sChildContent>
>>

sequence_mandatory_child_encode(sChName, sChildContent, soSaveBitStrmPosStatement) ::= <<
/* Encode <sChName> */
<soSaveBitStrmPosStatement>
<sChildContent>
>>

sequence_mandatory_child_decode(sChName, sChildContent, soSaveBitStrmPosStatement) ::= <<
/* Decode <sChName> */
<soSaveBitStrmPosStatement>
<sChildContent>
>>

sequence_always_present_child_encode(p, sAcc, sChName, soChildContent, soChildExpr, soSaveBitStrmPosStatement) ::= <<
/* Encode <sChName> */
/* marked as ALWAYS PRESENT, so it must be Some */
<p><sAcc><sChName> match
    case Some(<sChName>) =>
        <soSaveBitStrmPosStatement>
        <soChildContent>
    case None() => return Left(628)
>>

sequence_always_present_child_decode(p, sAcc, sChName, soChildContent, soChildExpr, soSaveBitStrmPosStatement) ::= <<
/* Decode <sChName> */
/* marked as ALWAYS PRESENT */
<soSaveBitStrmPosStatement>
val <p>_<sChName> =
    <soChildContent>
    Some(<soChildExpr>)
>>

sequence_always_absent_child_encode(p, sAcc, sChName, sChildContent, sChildTypedef, soSaveBitStrmPosStatement) ::= <<
/* Encode <sChName> */
/* marked as ALWAYS ABSENT, so do not encode anything */
<soSaveBitStrmPosStatement>
>>
sequence_always_absent_child_decode(p, sAcc, sChName, sChildContent, sChildTypedef, soSaveBitStrmPosStatement) ::= <<
/* Decode <sChName> */
/* marked as ALWAYS ABSENT, so do not decode anything */
<soSaveBitStrmPosStatement>
val <p>_<sChName> = None[<sChildTypedef>]()
>>

sequence_optional_child_encode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef, soSaveBitStrmPosStatement) ::= <<
/* Encode <sChName> */
<soSaveBitStrmPosStatement>
<p><sAcc><sChName> match
    case Some(<sChName>) =>
        <sChildContent>
    case None() =>
>>

sequence_optional_child_decode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef, soSaveBitStrmPosStatement) ::= <<
/* Decode <sChName> */
<soSaveBitStrmPosStatement>
val <p>_<sChName> =
    if <soExistVar> then
        <sChildContent>
        Some(<soChildExpr>)
    else None[<sChildTypedef>]()
>>

sequence_default_child_encode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue, soExistVar, soChildExpr, sChildTypedef, soSaveBitStrmPosStatement) ::= <<
<soSaveBitStrmPosStatement>
<sequence_optional_child_encode(p=p, sAcc=sAcc, sChName=sChName, sChildContent=sChildContent, soExistVar=soExistVar, soChildExpr=soChildExpr, sChildTypedef=sChildTypedef, soSaveBitStrmPosStatement=soSaveBitStrmPosStatement)>
>>

sequence_default_child_decode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue, soExistVar, soChildExpr, sChildTypedef, soSaveBitStrmPosStatement) ::= <<
/* Decode <sChName> */
<soSaveBitStrmPosStatement>
val <p>_<sChName> =
    if <soExistVar> then
        <sChildContent>
        Some(<soChildExpr>)
    else
        <sInitWithDefaultValue>
>>

sequence_call_post_encoding_function(p, sFncName, sBitStreamStartPos, sBitStreamPositionsNullPos) ::= <<
<sFncName>(<p>, <sBitStreamStartPos>, <sBitStreamPositionsNullPos>, codec)
>>

sequence_call_post_decoding_validator(p, sFncName, sBitStreamStartPos, sBitStreamPositionsNullPos) ::= <<
<sFncName>(<p>, <sBitStreamStartPos>, <sBitStreamPositionsNullPos>, codec) match
    case Left(err) => return Left(err)
    case Right(_) =>
>>

/* SEQUENCE END */


/* Choice like uper */
ChoiceChildAlwaysAbsent_encode(p, sAcc, sChildID, nChildIndex, sErrorCodeName) ::= <<
case <sChildID> =>
    return Left(<sErrorCodeName>)
>>

ChoiceChildAlwaysAbsent_decode(p, sAcc, sChildID, nChildIndex, sErrorCodeName) ::= <<
case <nChildIndex> =>
    return Left(<sErrorCodeName>)
>>

ChoiceChild_encode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr) ::= <<
case <sChildID>(<sChildName>) =>
    codec.encodeConstrainedWholeNumber(<nChildIndex>, 0, <nLastItemIndex>)
    <sChildContent>
>>

ChoiceChild_decode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr) ::= <<
case <nChildIndex> =>
    <sChildContent>
    <sChildID>(<sChildName>)
>>

Choice_encode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, td/*:FE_ChoiceTypeDefinition*/, nIndexSizeInBits, sErrCode) ::= <<
<p> match
    <arrsChildren: {ch|<ch>}; separator="\n">
>>

Choice_decode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, td/*:FE_ChoiceTypeDefinition*/, nIndexSizeInBits, sErrCode) ::= <<
codec.decodeConstrainedWholeNumber(0, <nLastItemIndex>) match
    case None() =>
        return Left(<sErrCode>)
    case Some(x) =>
        <sChoiceIndexName> = x.toInt
val <p> = <sChoiceIndexName> match
    <arrsChildren: {ch|<ch>}; separator="\n">
    case _ => return Left(<sErrCode>)
>>

/* Choice with presence determinants */

ChoiceChild_preWhen_encode(p, sAcc, sChildID, sChildBody, arrsConditions, bFirst, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr) ::= <<
case <sChildID>(<sChildName>) =>
    <sChildBody>
>>

ChoiceChild_preWhen_bool_condition(sExtFld) ::= "<sExtFld>"
ChoiceChild_preWhen_int_condition(sExtFld, nVal) ::= "(<sExtFld> == <nVal>)"
ChoiceChild_preWhen_str_condition(sExtFld, sVal, arrsNullChars) ::= "(<sExtFld>.sameElements(\"<sVal>\".getBytes ++ Array(0x00.toByte)))"
// TODO: Et le "else" ???
ChoiceChild_preWhen_decode(p, sAcc, sChildID, sChildBody, arrsConditions, bFirst, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr) ::= <<
<if(bFirst)>val <p> = if (<arrsConditions; separator=" && ">) {
<else>
else if (<arrsConditions; separator=" && ">) {
<endif>

    <sChildBody>
    <sChildID>(<sChildName>)
}
>>

Choice_preWhen_encode(p, sAcc, arrsChildren, sErrCode) ::= <<
<p> match
    <arrsChildren; separator="\n">
>>

Choice_preWhen_decode(p, sAcc, arrsChildren, sErrCode) ::= <<
<arrsChildren; separator="\n">
else return Left(<sErrCode>)
>>

/* Choice with Enum determinant */
ChoiceChild_Enum_encode(p, sAcc, sEnmName, sChildID, sChildBody, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr) ::= <<
case <sChildID>(<sChildName>) =>
    <sChildBody>
>>

ChoiceChild_Enum_decode(p, sAcc, sEnmName, sChildID, sChildBody, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr) ::= <<
case <sEnmName> =>
    <sChildBody>
    <sChildID>(<sChildName>)
>>

Choice_Enum_encode(p, sAcc, arrsChildren, sEnmExtFld, sErrCode) ::= <<
<p> match
    <arrsChildren; separator="\n">
>>

Choice_Enum_decode(p, sAcc, arrsChildren, sEnmExtFld, sErrCode) ::= <<
val <p> = <sEnmExtFld> match
    <arrsChildren; separator="\n">
>>

/* Updates */
SizeDependency(v, sCount, nMin, nMax, bCheckRange, sTypedefName) ::= <<
val <v> = <sCount>
>>

SizeDependencyFixedSize(v, nFixedSize) ::= <<
val <v> = <nFixedSize>
>>

ChoiceDependencyEnum_Item(v, sChildCID, sChildCIDHolder, sEnumCName, bIsOptional) ::= <<
<if(bIsOptional)>
case Some(<sChildCIDHolder>.<sChildCID>(_)) =>
<else>
case <sChildCIDHolder>.<sChildCID>(_) =>
<endif>
    <sEnumCName>
>>

ChoiceDependencyEnum(sV, sChPath, sAcc, arrsChoiceEnumItems, bIsOptional, sDefaultExpr) ::= <<
val <sV> = <sChPath> match
    <arrsChoiceEnumItems; separator="\n">
<if(bIsOptional)>
    case None() => <sDefaultExpr>
<endif>
>>

PresenceDependency(v, sSeqPath, sAcc, sChildName) ::= <<
val <v> = <sSeqPath><sAcc><sChildName>.isDefined
>>

ChoiceDependencyIntPres_child(v, sChildNamePrese, nChildRetVal) ::= <<
case _: <sChildNamePrese> =>
    <nChildRetVal>
>>

ChoiceDependencyStrPres_child(v, sChildNamePrese, sChildRetVal, arrsNullChars) ::= <<
case _: <sChildNamePrese> =>
    "<sChildRetVal>".getBytes ++ Array(0x00.toByte)
>>

ChoiceDependencyPres(v, sChPath, sAcc, arrsChoiceItems) ::= <<
val <v> = <sChPath> match
    <arrsChoiceItems; separator="\n">
>>

MultiAcnUpdate_checkEqual_pri0(p1,p2) ::= "(<p1> == <p2>)"
MultiAcnUpdate_checkEqual_str0(p1,p2) ::= "(<p1> == <p2>)"

MultiAcnUpdate_get_first_init_value_pri(sV0, sVi, sChPath, bIsFirst, bIsSingleElement) ::= <<
<if(bIsSingleElement)>
val <sV0> = <sVi>
<else>
<if(bIsFirst)>
val <sV0> = if <sChPath>.isDefined then
    <sVi>
<else>
else if <sChPath>.isDefined then
    <sVi>
<endif>
<endif>
>>

MultiAcnUpdate_get_first_init_value_str(sV0, sVi, sChPath, bIsFirst, bIsSingleElement) ::= <<
<MultiAcnUpdate_get_first_init_value_pri(sV0=sV0, sVi=sVi, sChPath=sChPath, bIsFirst=bIsFirst, bIsSingleElement=bIsSingleElement)>
>>

MultiAcnUpdate_checkEqual_pri(sV0, sVi, sChPath, bIsAlwaysInit) ::= <<
<if(bIsAlwaysInit)>
(<sV0> == <sVi>)
<else>
((<sChPath>.isDefined && <sV0> == <sVi>) || !<sChPath>.isDefined)
<endif>
>>
MultiAcnUpdate_checkEqual_str(sV0, sVi, sChPath, bIsAlwaysInit) ::= <<
<MultiAcnUpdate_checkEqual_pri(sV0=sV0, sVi=sVi, sChPath=sChPath, bIsAlwaysInit=bIsAlwaysInit)>
>>

MultiAcnUpdate(v, sV0, sErrCode, arrsLocalDeclarations, arrsLocalUpdateStatements, arrsGetFirstIntValue, bIsFirstIntValueSingle, arrsLocalCheckEquality, sDefaultExpr) ::= <<
val <v> = {
    <arrsLocalDeclarations; separator="\n">

    <arrsLocalUpdateStatements; separator="\n">

    <arrsGetFirstIntValue; separator="\n">
    <if(!bIsFirstIntValueSingle)>
    else <sDefaultExpr>
    <endif>


    if !(<arrsLocalCheckEquality; separator=" && ">) then
        return Left(998)
    <v>
}
>>


checkAccessPath(arrsCheckPaths, sUpdateStatement, v, sInitExpr) ::= <<
val <v> =
    if <arrsCheckPaths; separator=" && "> then
        <sUpdateStatement>
        <v>
    else <sInitExpr>
>>


SizeDependency_oct_str_containing(p, sFuncName, sReqBytesForUperEncoding, v, bIsOctet, sComment) ::= <<
{
    /*first encode containing type to a temporary bitstream. That's the only way to learn in advance the size of the encoding octet string*/
    val pBitStrm_save: BitStream = pBitStrm
    pBitStrm = BitStream_Init(arr.length)
    <sComment>
    pBitStrm = pBitStrm_save
}
<v> = <if(bIsOctet)>bitStrm.currentBit == 0 ? bitStrm.currentByte : (bitStrm.currentByte + 1)<else>bitStrm.currentByte*8+bitStrm.currentBit<endif>;

>>

octet_string_containing_ext_field_func_encode(p, sFuncName, sReqBytesForUperEncoding, sExtField, sErrCode, soInner) ::= <<
codec.encodeOctetString_no_length(arr, <sExtField>.asInstanceOf[Int])
>>

octet_string_containing_ext_field_func_decode(p, sFuncName, sReqBytesForUperEncoding, sExtField, sErrCode, soInner) ::= <<
/*open new scope to declare some variables*/
{
    /* decode to a temporary bitstream */
    val pBitStrm_save: BitStream = pBitStrm
    val bitStrm: BitStream = BitStream_Init(<sReqBytesForUperEncoding>)

    if <sExtField>.asInstanceOf[Int] \<= <sReqBytesForUperEncoding> then
        codec.decodeOctetString_no_length(<sExtField>.asInstanceOf[Int]) match
            case NoneMut() =>
                return Left(<pErrCode>)
            case SomeMut(arr) =>
                bitStrm.buf = arr

        pBitStrm = bitStrm
        <soInner>
        pBitStrm = pBitStrm_save;
}
>>

bit_string_containing_ext_field_func_encode(p, sFuncName, sReqBytesForUperEncoding, sReqBitsForUperEncoding, sExtField, sErrCode) ::= <<
codec.appendBitsMSBFirst(arr, <sExtField>.toInt)
>>

bit_string_containing_ext_field_func_decode(p, sFuncName, sReqBytesForUperEncoding, sReqBitsForUperEncoding, sExtField, sErrCode) ::= <<
/*open new scope to declare some variables*/
{
    /* decode to a temporary bitstream */
    val bitStrm: BitStream = BitStream_Init(<sReqBytesForUperEncoding>)
    if <sExtField>.asInstanceOf[Int] \<= <sReqBitsForUperEncoding> then
        codec.readBits((int)<sExtField>) match
            case NoneMut() =>
                return Left(<pErrCode>)
            case SomeMut(arr) =>
                bitStrm.buf = arr

        <sFuncName>(<p>, bitStrm) match
            case Left(err) => return Left(err)
            case Right(_) =>
}
>>

rtlModuleName() ::= ""
sparkAnnotations_encode(sTypeDefName) ::= ""
sparkAnnotations_decode(sTypeDefName) ::= ""

octet_string_containing_func_encode(p, sFuncName, sReqBytesForAcnEncoding, nBits, nMinSize, nMaxSize, bFixedSize) ::= <<
/*open new scope to declare some variables*/
{
    /* encode to a temporary bitstream */
    val bitStrm: BitStream = BitStream_Init(<sReqBytesForAcnEncoding>)
    <sFuncName>(<p>, bitStrm, false) match
        case Left(err) => return Left(err)
        case Right(_) =>

    int nCount = bitStrm.currentBit == 0 ? bitStrm.currentByte : (bitStrm.currentByte + 1)
    <if(bFixedSize)>
    codec.encodeOctetString_no_length(bitStrm.buf, nCount)

    <else>
    codec.encodeConstrainedWholeNumber(nCount, <nMinSize>, <nMaxSize>)
    codec.encodeOctetString_no_length(bitStrm.buf, nCount)

    <endif>
}
>>

octet_string_containing_func_decode(p, sFuncName, sReqBytesForAcnEncoding, nBits, nMinSize, nMaxSize, bFixedSize) ::= <<
/*open new scope to declare some variables*/
{
    /* decode to a temporary bitstream */
    val bitStrm: BitStream = BitStream_Init(<sReqBytesForAcnEncoding>)

    <if(bFixedSize)>
    codec.decodeOctetString_no_length(<nMinSize>) match
        case NoneMut() =>
            return Left(pErrCode)
        case SomeMut(arr) =>
            bitStrm.buf = arr
    <else>
    var nCount: Int = 0
    codec.decodeConstrainedWholeNumber(<nMinSize>, <nMaxSize>) match
        case None() =>
            return Left(pErrCode)
        case Some(x) =>
            nCount = x

    codec.decodeOctetString_no_length(nCount.asInstanceOf[Int])
        case NoneMut() =>
            return Left(pErrCode)
        case SomeMut(arr) =>
            bitStrm.buf = arr

    <endif>
    <sFuncName>(<p>, &bitStrm) match
        case Left(err) => return Left(err)
        case Right(_) =>
}
>>

bit_string_containing_func_encode(p, sFuncName, sReqBytesForAcnEncoding, sReqBitsForUperEncoding, nBits, nMinSize, nMaxSize, bFixedSize) ::= <<
/* open new scope to declare some variables */
{
    /* encode to a temporary bitstream */
    val bitStrm: BitStream = BitStream_Init(<sReqBytesForAcnEncoding>)

    <sFuncName>(<p>, bitStrm, false) match // TODO check if call is correct asn:1131
        case Left(err) => return Left(err)
        case Right(_) =>

    val nCount: Int = bitStrm.currentByte*8 + bitStrm.currentBit;
    <if(bFixedSize)>
    codec.appendBitsMSBFirst(bitStrm.buf, nCount)

    <else>
    codec.BitStream_EncodeConstraintWholeNumber(nCount, <nMinSize>, <nMaxSize>)
    codec.appendBits(bitStrm.buf, nCount)

    <endif>
}
>>

bit_string_containing_func_decode(p, sFuncName, sReqBytesForAcnEncoding, sReqBitsForUperEncoding, nBits, nMinSize, nMaxSize, bFixedSize) ::= <<
/*open new scope to declare some variables*/
{
    /* decode to a temporary bitstream */
    val codec: Codec = ACN(BitStream_Init(<sReqBytesForAcnEncoding>))

    <if(bFixedSize)>
    codec.readBits(<nMinSize>) match
        case NoneMut() =>
            return Left(pErrCode)
        case SomeMut(arr) =>
            bitStrm.buf = arr

    <sFuncName>(<p>, bitStrm) match // TODO check if call is right
        case Left(err) => return Left(err)
        case Right(_) =>

    <else>
    var nCount: Int = 0
    codec.decodeConstrainedWholeNumber(<nMinSize>, <nMaxSize>) match
        case None() =>
            return Left(pErrCode)
        case Some(x) =>
            nCount = x

    codec.readBits(nCount) match
        case NoneMut() =>
            return Left(pErrCode)
        case SomeMut(arr) =>
            bitStrm.buf = arr

    <sFuncName>(<p>, bitStrm) match
        case Left(err) => return Left(err)
        case Right(_) =>

    <endif>
}
>>
