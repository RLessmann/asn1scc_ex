group c_uper;

rtlModuleName() ::= ""

call_base_type_func_encode(p, sFuncName) ::= "ret = <sFuncName>(<p>, pBitStrm, false)"
call_base_type_func_decode(p, sFuncName) ::= "ret = <sFuncName>(<p>, pBitStrm)"

/*******************************************************/
/*   U P E R                                           */
/*******************************************************/

EmitTypeAssignment_def_err_code(sErrCode, nErrValue) ::= <<
@inline @cCode.inline val <sErrCode>: Int = <nErrValue>  /**/
>>

EmitTypeAssignment_def_encode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER, soSparkAnnotations, bReqBytesForEncodingIsZero) ::= <<
<arrsErrcodes:{x|<x> // uper:17}; separator="\n">
@inline @cCode.inline val <sTypeDefName>_REQUIRED_BYTES_FOR_ENCODING: Int = <nMaxBytesInPER> // uper:18
@inline @cCode.inline val <sTypeDefName>_REQUIRED_BITS_FOR_ENCODING: Int = <nMaxBitsInPER> // uper:19
>>

EmitTypeAssignment_encode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp, bReqBytesForEncodingIsZero, bBsIsUnreferenced, bVarNameIsUnreferenced, soInitFuncName) ::= <<
def <sFuncName>(<if(bVarNameIsUnreferenced)>@annotation.unused <endif><sVarName>: Ref[<sTypeDefName>], <if(bBsIsUnreferenced)>@annotation.unused <endif>pBitStrm: BitStream, bCheckConstraints: Boolean): Int = //uper_scala:23
{
    var ret = 0

    <arrsLocalVariables:{lv|<lv>}; separator="\n">
    <if(soIValidFuncName)>
    if (bCheckConstraints) 
        ret = <soIValidFuncName>(<sVarName>)
    if (ret == 0) {
        <sContent>
    }
    <else>
    <sContent>
    <endif>
    
    ret
}
>>

EmitTypeAssignment_def_decode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER, soSparkAnnotations, bReqBytesForEncodingIsZero) ::= <<
<arrsErrcodes:{x|<x> // uper:47}; separator="\n">
>>

EmitTypeAssignment_decode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp, bReqBytesForEncodingIsZero, bBsIsUnreferenced, bVarNameIsUnreferenced, soInitFuncName) ::= <<
def <sFuncName>(<if(bVarNameIsUnreferenced)>@annotation.unused <endif><sVarName>: Ref[<sTypeDefName>], <if(bBsIsUnreferenced)>@annotation.unused <endif>pBitStrm: BitStream): Int = 
{
    var ret = 0;

    <arrsLocalVariables:{lv|<lv>}; separator="\n">

    <sContent>

    if (ret == 0)
        ret = <if(soIValidFuncName)><soIValidFuncName>(<sVarName>)<endif> 
    ret
}
>>

InternalItem_oct_str_encode(p, sAcc, i, sErrCode) ::=<<
BitStream_AppendByte0(pBitStrm, <p><sAcc>arr[<i>]);
>>

InternalItem_oct_str_decode(p, sAcc, i, sErrCode) ::=<<
if(!BitStream_ReadByte(pBitStrm, &(<p><sAcc>arr[<i>])){ 
    ret = <sErrCode>	// uper_Scala:106
}
>>

PrintAlphabet2(arrnCharSet) /*nogen*/::= <<
static byte allowedCharSet[] = {<arrnCharSet:{ch|0x<ch;format="X2">}; wrap, anchor, separator=",">}; 
>>

InternalItem_string_with_alpha_encode(p, sErrCode, td/*:FE_StringTypeDefinition*/, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
int charIndex = GetCharIndex(<p>[<i>], allowedCharSet, <nAlphabetLength>);
BitStream_EncodeConstraintWholeNumber(pBitStrm, charIndex, 0, <nLastItemIndex>);
>>
InternalItem_string_with_alpha_decode(p, sErrCode,  td/*:FE_StringTypeDefinition*/, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
asn1SccSint charIndex = 0;
val worked = BitStream_DecodeConstraintWholeNumber(pBitStrm, &charIndex, 0, <nLastItemIndex>)
if(!worked) {
    ret = <sErrCode>; // uper_scala:123
}
<p>[<i>] = if (worked) allowedCharSet[charIndex] else '\0' ;
>>

InternalItem_string_no_alpha_encode(p, sErrCode, i) ::=<<
BitStream_EncodeConstraintWholeNumber(pBitStrm, <p>[<i>], 0, 127);
>>

InternalItem_string_no_alpha_decode(p, sErrCode, i) ::=<<
asn1SccSint charValue=0;
if(!BitStream_DecodeConstraintWholeNumber(pBitStrm, &charValue, 0, 127))
    ret = <sErrCode> // uper_scala:134
<p>[<i>] = (char)charValue;
>>


/* INTEGER START*/


/*case: A:: = INTEGER (-5..20) */
IntFullyConstraint_encode(p, nMin, nMax, nBits, sSsuffix, sErrCode) ::= "BitStream_EncodeConstraintWholeNumber(pBitStrm, <p>, <nMin>, <nMax>);"
IntFullyConstraint_decode(p, nMin, nMax, nBits, sSsuffix, sErrCode) ::= <<
if(!BitStream_DecodeConstraintWholeNumber<sSsuffix>(pBitStrm, <p>, <nMin>, <nMax>))
    ret = <sErrCode> // uper_scala:146
>>

/*case: Positive fully constraint A:: = INTEGER (5..20) */
IntFullyConstraintPos_encode(p, nMin, nMax, nBits, sSsuffix, sErrCode) ::= "BitStream_EncodeConstraintPosWholeNumber(pBitStrm, <p>, <nMin>, <nMax>);"
IntFullyConstraintPos_decode(p, nMin, nMax, nBits, sSsuffix, sErrCode) ::= <<
if(!BitStream_DecodeConstraintPosWholeNumber<sSsuffix>(pBitStrm, <p>, <nMin>, <nMax>))
    ret = <sErrCode> // uper_scala:114
>>


/*case: A :: = INTEGER */
IntUnconstraint_encode(p, sErrCode, bCoverageIgnore) ::= "BitStream_EncodeUnConstraintWholeNumber(pBitStrm, <p>);"
IntUnconstraint_decode(p, sErrCode, bCoverageIgnore) ::= <<
if(!BitStream_DecodeUnConstraintWholeNumber(pBitStrm, <p>)   <if(bCoverageIgnore)>/*COVERAGE_IGNORE*/<endif>
    ret = <sErrCode> // uper_scala:161                               <if(bCoverageIgnore)>/*COVERAGE_IGNORE*/<endif>
>>

/*case: A :: = INTEGER(MIN..5) */
IntUnconstraintMax_encode(p, nMax, soCheckExp, sErrCode) ::= "BitStream_EncodeUnConstraintWholeNumber(pBitStrm, <p>);"
IntUnconstraintMax_decode(p, nMax, soCheckExp, sErrCode) ::= <<
if(!BitStream_DecodeUnConstraintWholeNumber(pBitStrm, <p>))
    ret = <if(soCheckExp)>(if (<soCheckExp>) : 0 else)<endif> <sErrCode>
>>

/*case: A:: = INTEGER (-5..MAX) */
IntSemiConstraint_encode(p, nMin, sErrCode) ::= "BitStream_EncodeSemiConstraintWholeNumber(pBitStrm, <p>, <nMin>);"
IntSemiConstraint_decode(p, nMin, sErrCode) ::= <<
if(!BitStream_DecodeSemiConstraintWholeNumber(pBitStrm, <p>, <nMin>))
    ret = <sErrCode>
>>

/*case: A:: = INTEGER (5..MAX) */
IntSemiConstraintPos_encode(p, nMin, sErrCode) ::= "BitStream_EncodeSemiConstraintPosWholeNumber(pBitStrm, <p>, <nMin>);"
IntSemiConstraintPos_decode(p, nMin, sErrCode) ::= <<
if(!BitStream_DecodeSemiConstraintPosWholeNumber(pBitStrm, <p>, <nMin>))
    ret = <sErrCode>
>>

/*case: A:: = INTEGER (5..5) */
IntNoneRequired_encode(p, nConst, sErrCode) ::=<<
/* No need to encode the val <p>, it will always be <nConst> */
>>
IntNoneRequired_decode(p, nConst, sErrCode) ::= <<
<p>=<nConst>; 
ret = 0
>>

/*case: A:: = INTEGER (5..40,...) */
IntRootExt_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
BitStream_AppendBitZero(pBitStrm); /* write extension bit*/
<sIntBody>
>>

IntRootExt_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
{
    Boolean extBit = false;
    /* read extension bit*/
    val success = BitStream_ReadBit(pBitStrm, Ref(extBit))
    if (success) {
        if (extBit == false) { /* ext bit is zero ==> value is expecteted with root range*/
            <sIntBody>
        } else {
            <IntUnconstraint_decode(p=p, sErrCode = sErrCode, bCoverageIgnore="true")>
        }
    }
    else 
        ret = <sErrCode>
}
>>

/*case: A:: = INTEGER (5..40,..., 60..70) */
IntRootExt2_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
if (<sRootBaseConstraint>) {
    BitStream_AppendBitZero(pBitStrm); /* write extension bit, value within root range, so ext bit is zero */
    <sIntBody>
} else {
    /* value is not within root range, so ext bit is one and value is encoded as uncostraint */
    BitStream_AppendBitOne(pBitStrm);
    <IntUnconstraint_encode(p=p, sErrCode=sErrCode)>
};
>>

IntRootExt2_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::= "<IntRootExt_decode(p=p, nMin=nMin, sRootBaseConstraint = sRootBaseConstraint, sIntBody = sIntBody, sErrCode=sErrCode)>"


/* INTEGER END*/


Boolean_encode(p, sErrCode) ::= "BitStream_AppendBit(pBitStrm,<p>);"

Boolean_decode(p, sErrCode) ::= <<
if(!BitStream_ReadBit(pBitStrm, <p>))
    ret = <sErrCode>
>>

Real_encode(p, sSuffix, sErrCode) ::= "BitStream_EncodeReal(pBitStrm, <p>);"
Real_decode(p, sSuffix, sErrCode) ::= <<
if(!BitStream_DecodeReal<sSuffix>(pBitStrm, <p>))
    ret = <sErrCode>
>>

ObjectIdentifier_encode(p, sErrCode) ::= "ObjectIdentifier_uper_encode(pBitStrm, <p>);"
ObjectIdentifier_decode(p, sErrCode) ::= <<
if(!ObjectIdentifier_uper_decode(pBitStrm, <p>))
    ret = <sErrCode>;
>>

RelativeOID_encode(p, sErrCode) ::= "RelativeOID_uper_encode(pBitStrm, <p>);"
RelativeOID_decode(p, sErrCode) ::= <<
if(!RelativeOID_uper_decode(pBitStrm, <p>))
    ret = <sErrCode>
>>

Time_encode(p, sTimeSubType, sErrCode) ::= "<sTimeSubType>_uper_encode(pBitStrm, <p>);"
Time_decode(p, sTimeSubType, sErrCode) ::= <<
if(!<sTimeSubType>_uper_decode(pBitStrm, <p>))
    ret = <sErrCode>
>>

Enumerated_item_encode(p, sName, nIndex, nLastItemIndex) ::= <<
case <sName>:   
    BitStream_EncodeConstraintWholeNumber(pBitStrm, <nIndex>, 0, <nLastItemIndex>);
    break;
>>

Enumerated_item_decode(p, sName, nIndex, nLastItemIndex) ::= <<
case <nIndex>: 
    <p> = <sName>;
    break;
>>

Enumerated_encode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
switch(<p>) 
{
    <arrsItem; separator="\n">
    default:
        ret = <sErrCode>;
}
>>

Enumerated_decode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
{
    // TODO does ret already exist? : uper_scala:252
    asn1SccSint enumIndex;
    val check = BitStream_DecodeConstraintWholeNumber(pBitStrm, &enumIndex, 0, <nLastItemIndex>))
    ret = if (check) 0 : <sErrCode>;
    if (check)
    {
        switch(enumIndex) 
        {
            <arrsItem; separator="\n">
            default:                        /*COVERAGE_IGNORE*/
                ret = <sErrCode>;
        }
    } else {
        <p> = <sFirstItemName>;             /*COVERAGE_IGNORE*/
    }
}
>>


/* CHOICE START*/

choice_child_encode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr) ::= <<
case <sChildID>:
    BitStream_EncodeConstraintWholeNumber(pBitStrm, <nChildIndex>, 0, <nLastItemIndex>);
    <sChildContent>
    break;
>>
choice_child_decode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr) ::= <<
case <nChildIndex>:
    <p><sAcc>kind = <sChildID>;
    <sChildContent>
    break;
>>

choice_encode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, td/*:FE_ChoiceTypeDefinition*/, nIndexSizeInBits) ::= <<
switch(<p><sAcc>kind) 
{
    <arrsChildren: {ch|<ch>}; separator="\n">
    default:
        ret = <sErrCode>;
}
>>

choice_decode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, td/*:FE_ChoiceTypeDefinition*/, nIndexSizeInBits) ::= <<
if(!BitStream_DecodeConstraintWholeNumber(pBitStrm, &<sChoiceIndexName>, 0, <nLastItemIndex>))
    ret = <sErrCode>
else {
    switch(<sChoiceIndexName>) 
    {
        <arrsChildren: {ch|<ch>}; separator="\n">
        default:                        /*COVERAGE_IGNORE*/
            ret = <sErrCode>;
    }
}  /*COVERAGE_IGNORE*/
>>

/* CHOICE END*/


/* SEQUENCE START */
sequence_presence_bit_encode(p, sAcc, sChName, sErrCode) ::= "BitStream_AppendBit(pBitStrm,<p><sAcc>exist.<sChName>);"
sequence_presence_bit_decode(p, sAcc, sChName, sErrCode) ::= <<
if(!BitStream_ReadBit(pBitStrm, &presenceBit))
    ret = <sErrCode>
<p><sAcc>exist.<sChName> = if (presenceBit == 0) 0 else 1
>>

sequence_presence_bit_fix_encode(p, sAcc, sChName, sErrCode, sVal) ::= "BitStream_AppendBit(pBitStrm, <sVal>);"

sequence_presence_bit_fix_decode(p, sAcc, sChName, sErrCode, sVal) ::= <<
<sequence_presence_bit_decode(p=p, sAcc=sAcc, sChName=sChName, sErrCode=sErrCode)>
>>


sequence_mandatory_child_encode(sChName, sChildContent) ::= <<
/*Encode <sChName> */
<sChildContent>
>>

sequence_mandatory_child_decode(sChName, sChildContent) ::= <<
/* Decode <sChName> */
<sChildContent>
>>


sequence_optional_child_encode(p, sAcc, sChName, sChildContent) ::= <<
/*Encode <sChName> */
if (<p><sAcc>exist.<sChName>) {
    <sChildContent>
}
>>

sequence_optional_child_decode(p, sAcc, sChName, sChildContent) ::= <<
/*Decode <sChName> */
if (<p><sAcc>exist.<sChName>) {
    <sChildContent>
}
>>


sequence_default_child_encode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue) ::= <<
<sequence_optional_child_encode(p=p, sAcc=sAcc, sChName=sChName, sChildContent=sChildContent)>
>>


sequence_default_child_decode(p, sAcc, sChName, sChildContent, sInitWithDefaultValue) ::= <<
/*Decode <sChName> */
if (<p><sAcc>exist.<sChName>) {
    <sChildContent>
} else {
    <sInitWithDefaultValue>
}
>>


/* SEQUENCE END */

loopFixedItem (i, fixedSize,  sInternalItem)::= /*nogen*/<<	
var i = 0
while((<i> \< (int)<fixedSize>)) && ret == 0)
{
    <sInternalItem>
    i += 1
}
>>


/* IA5String & Numeric String */

str_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
>>

str_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
<p>[<nFixedSize>] = 0x0;
>>

str_VarSize_encode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
nStringLength = strlen(<p>);
/*ret = nStringLength >= <nSizeMin> && nStringLength \<= <nSizeMax>;*/
BitStream_EncodeConstraintWholeNumber(pBitStrm, nStringLength, <nSizeMin>, <nSizeMax>);
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength")>

>>

str_VarSize_decode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &nStringLength, <nSizeMin>, <nSizeMax>);
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength")>
<p>[nStringLength] = 0x0;
>>



/* SEQUENCE OF & OCTET STRING*/
seqOf_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
>>

seqOf_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize)>
>>

seqOf_VarSize_encode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sErrCode) ::= <<
BitStream_EncodeConstraintWholeNumber(pBitStrm, <p><sAcc>nCount, <nSizeMin>, <nSizeMax>);
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "nCount"])>
>>

seqOf_VarSize_decode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sErrCode) ::= <<
ret = if(BitStream_DecodeConstraintWholeNumber(pBitStrm, &nCount, <nSizeMin>, <nSizeMax>)) 0 else <sErrCode>
<p><sAcc>nCount = (long)nCount;
<loopFixedItem(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "nCount"])>
>>

octect_FixedSize_encode(p, sAcc, nFixedSize) ::= <<
ret = BitStream_EncodeOctetString_no_length(pBitStrm, <p><sAcc>arr, <nFixedSize>);
>>

octect_FixedSize_decode(p, sAcc, nFixedSize) ::= <<
ret = if (BitStream_DecodeOctetString_no_length(pBitStrm, <p><sAcc>arr, <nFixedSize>)) 0 else 1
>>

octect_VarSize_encode(p, sAcc, nSizeMin, nSizeMax, nSizeInBits, sErrCode) ::= <<
BitStream_EncodeConstraintWholeNumber(pBitStrm, <p><sAcc>nCount, <nSizeMin>, <nSizeMax>);
ret = BitStream_EncodeOctetString_no_length(pBitStrm, <p><sAcc>arr, <p><sAcc>nCount);
>>

octect_VarSize_decode(p, sAcc, nSizeMin, nSizeMax, nSizeInBits, sErrCode) ::= <<
if (BitStream_DecodeConstraintWholeNumber(pBitStrm, &nCount, <nSizeMin>, <nSizeMax>))
{
    ret = <sErrCode>
}
<p><sAcc>nCount = (long)nCount;
if(!BitStream_DecodeOctetString_no_length(pBitStrm, <p><sAcc>arr, <p><sAcc>nCount))
{
    ret = <sErrCode> // TODO error code may be wrong
}
>>



/* BIT STRING*/
bitString_FixSize_encode(p, sAcc, nFixedSize, sErrCode) ::= "BitStream_AppendBits(pBitStrm, <p><sAcc>arr, <nFixedSize>);"
bitString_FixSize_decode(p, sAcc, nFixedSize, sErrCode) ::= <<
ret = BitStream_ReadBits(pBitStrm, <p><sAcc>arr, <nFixedSize>);
ret = if (ret == 0) 0 else <sErrCode>;
>>

bitString_VarSize_encode(p, sAcc, nSizeMin, nSizeMax, sErrCode, nSizeInBits) ::= <<
BitStream_EncodeConstraintWholeNumber(pBitStrm, <p><sAcc>nCount, <nSizeMin>, <nSizeMax>);
<bitString_FixSize_encode(p=p, sAcc=sAcc, nFixedSize=[p, sAcc,"nCount"], sErrCode=sErrCode)>
>>

bitString_VarSize_decode(p, sAcc, nSizeMin, nSizeMax, sErrCode, nSizeInBits) ::= <<
if(BitStream_DecodeConstraintWholeNumber(pBitStrm, &nCount, <nSizeMin>, <nSizeMax>)
{
    <p><sAcc>nCount = (long)nCount;
    <bitString_FixSize_decode(p=p, sAcc=sAcc, nFixedSize=[p,sAcc, "nCount"], sErrCode=sErrCode)>
}
>>


FixedSize_Fragmentation_sqf_64K_encode(p, sAcc,sCurOffset, sCurBlockSize, sBlockIndex, nBlocks64K, sInternalItem, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
//encode <nBlocks64K> x 64K Blocks
<sCurBlockSize> = 0x10000;
<sCurOffset> = 0;
var <sBlockIndex> = 0
while(<sBlockIndex> \< <nBlocks64K>)
{
    BitStream_EncodeConstraintWholeNumber(pBitStrm, 0xC4, 0, 0xFF); 
    <if(bIsBitStringType)>
    BitStream_AppendBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<sCurBlockSize>)

    <else>
    val <sBLI>=(int)<sCurOffset>
    while(<sBLI> \< (int)(<sCurBlockSize> + <sCurOffset>))
    {
        <sInternalItem>
        <sBLI> += 1
    }
    <endif>
    <sCurOffset> += <sCurBlockSize>
    <sBlockIndex> += 1
}
>>

FixedSize_Fragmentation_sqf_small_block_encode(p, sAcc,sInternalItem, nBlockSize, sBlockId, sCurOffset, sCurBlockSize, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
//encode <nBlockSize> Block
<sCurBlockSize> = <nBlockSize>;
BitStream_EncodeConstraintWholeNumber(pBitStrm, <sBlockId>, 0, 0xFF); 
<if(bIsBitStringType)>
BitStream_AppendBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<sCurBlockSize>);

<else>
for(<sBLI>=(int)<sCurOffset>; <sBLI> \< (int)(<sCurBlockSize> + <sCurOffset>); <sBLI>++)
{
    <sInternalItem>
}

<endif>
<sCurOffset> += <sCurBlockSize>;
>>

FixedSize_Fragmentation_sqf_remaining_encode(p, sAcc,sInternalItem, bRemainingItemsWithinByte, nRemainingItemsVar, sCurOffset, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::= <<
//encode remaining <nRemainingItemsVar> items
<if(bRemainingItemsWithinByte)>
BitStream_EncodeConstraintWholeNumber(pBitStrm, <nRemainingItemsVar>, 0, 0xFF);

<else>
BitStream_AppendBit(pBitStrm, 1);
BitStream_EncodeConstraintWholeNumber(pBitStrm, <nRemainingItemsVar>, 0, 0x7FFF);

<endif>
<if(bIsBitStringType)>
BitStream_AppendBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<nRemainingItemsVar>);

<else>
for(<sBLI>=(int)<sCurOffset>; <sBLI> \< (int)(<sCurOffset> + <nRemainingItemsVar>); <sBLI>++)
{
    <sInternalItem>
}

<endif>
>>

FixedSize_Fragmentation_sqf_encode(p, sAcc, arrsEncodingParts, nFixedSize, bIsBitStringType) ::= <<
<arrsEncodingParts; separator="\n">
>>

Fragmentation_sqf_encode(p, sAcc, sInternalItem, nIntItemMaxSize, nSizeMin, nSizeMax, nRequiredBitsForUPerEncoding, bIsVariableSize, sErrCodeName, sRemainingItemsVar, sCurBlockSize, sBlockIndex, sCurOffset, sBLJ, sBLI, sLengthTmp, bIsBitStringType, bIsAsciiString) ::= <<
<sRemainingItemsVar> = <if(bIsAsciiString)>(asn1SccSint)strlen(<p>)<else><if(bIsVariableSize)><p><sAcc>nCount<else><nSizeMax><endif><endif>;
<sCurBlockSize> = 0;
<sCurOffset> = 0;
<sBlockIndex> = 0;
while (<sRemainingItemsVar> >= 0x4000 && <sBlockIndex> \< <if(bIsAsciiString)>(asn1SccSint)strlen(<p>)<else><if(bIsVariableSize)><p><sAcc>nCount<else><nSizeMax><endif><endif>) 
{
    if (<sRemainingItemsVar> >= 0x10000)
    {
        <sCurBlockSize> = 0x10000;
        BitStream_EncodeConstraintWholeNumber(pBitStrm, 0xC4, 0, 0xFF); 
    }
    else if (<sRemainingItemsVar> >= 0xC000)
    {
        <sCurBlockSize> = 0xC000;
        BitStream_EncodeConstraintWholeNumber(pBitStrm, 0xC3, 0, 0xFF); 
    }
    else if (<sRemainingItemsVar> >= 0x8000)
    {
        <sCurBlockSize> = 0x8000;
        BitStream_EncodeConstraintWholeNumber(pBitStrm, 0xC2, 0, 0xFF); 
    }
    else 
    {
        <sCurBlockSize> = 0x4000;
        BitStream_EncodeConstraintWholeNumber(pBitStrm, 0xC1, 0, 0xFF); 
    }
    
    <if(bIsBitStringType)>
    BitStream_AppendBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<sCurBlockSize>);
    <else>
    for(<sBLI>=(int)<sCurOffset>; <sBLI> \< (int)(<sCurBlockSize> + <sCurOffset>); <sBLI>++)
    {
        <sInternalItem>
    }
    <endif>
    <sCurOffset> += <sCurBlockSize>;
    <sRemainingItemsVar> -= <sCurBlockSize>;
    <sBlockIndex> = <sBlockIndex>+1;
}

if (<sRemainingItemsVar> \<= 0x7F)
    BitStream_EncodeConstraintWholeNumber(pBitStrm, <sRemainingItemsVar>, 0, 0xFF);
else
{
    BitStream_AppendBit(pBitStrm, 1);
    BitStream_EncodeConstraintWholeNumber(pBitStrm, <sRemainingItemsVar>, 0, 0x7FFF);
}

<if(bIsBitStringType)>
BitStream_AppendBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<sRemainingItemsVar>);
<else>
for(<sBLI>=(int)<sCurOffset>; <sBLI> \< (int)(<sCurOffset> + <sRemainingItemsVar>); <sBLI>++)
{
    <sInternalItem>
}
<endif>
>>


FixedSize_Fragmentation_sqf_64K_decode(p, sAcc,sCurOffset, sCurBlockSize, sBlockIndex, nBlocks64K, sInternalItem, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
//we expect to decode <nBlocks64K> Blocks and each block must contain 64K elements. Each block must begin with the byte 0xC4
<sCurBlockSize> = 0x10000;
<sCurOffset> = 0;
*pErrCode = <sErrCodeName>; 
for(<sBlockIndex> = 0; ret && <sBlockIndex> \< <nBlocks64K>; <sBlockIndex>++) {
    ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &<sRemainingItemsVar>, 0, 0xFF);
    val check = (ret == 0) && (<sRemainingItemsVar> == 0xC4);
    ret = if (check) 0 else <sErrCodeName>;
    if (ret == 0) {
        <if(bIsBitStringType)>
        ret = BitStream_ReadBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<sCurBlockSize>);
        ret = if (ret == 0) 0 else <sErrCodeName>;

        <else>
        for(<sBLI>=(int)<sCurOffset>; <sBLI> \< (int)(<sCurBlockSize> + <sCurOffset>); <sBLI>++) {
            <sInternalItem>
        }

        <endif>
        <sCurOffset> += <sCurBlockSize>;
    }
}
>>


FixedSize_Fragmentation_sqf_small_block_decode(p, sAcc,sInternalItem, nBlockSize, sBlockId, sCurOffset, sCurBlockSize, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
//decode a single Block with <nBlockSize> items
<sCurBlockSize> = <nBlockSize>;
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &<sRemainingItemsVar>, 0, 0xFF);
val check = (ret == 0) && (<sRemainingItemsVar> == <sBlockId>);
ret = if (check) 0 else <sErrCodeName>;
if (ret == 0) {
<if(bIsBitStringType)>
    ret = BitStream_ReadBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<sCurBlockSize>);
    ret = if (ret == 0) 0 else <sErrCodeName>;

    <else>
    for(<sBLI>=(int)<sCurOffset>; <sBLI> \< (int)(<sCurBlockSize> + <sCurOffset>); <sBLI>++) {
        <sInternalItem>
    }

    <endif>
    <sCurOffset> += <sCurBlockSize>;
}
>>

FixedSize_Fragmentation_sqf_remaining_decode(p, sAcc,sInternalItem, bRemainingItemsWithinByte, nRemainingItemsVar, sCurOffset, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::= <<
//decode remaining <nRemainingItemsVar> items
<if(bRemainingItemsWithinByte)>
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &<sRemainingItemsVar>, 0, 0xFF);
ret  = ret && (<sRemainingItemsVar> == <nRemainingItemsVar>);

<else>
ret = BitStream_DecodeConstraintWholeNumber(pBitStrm, &<sRemainingItemsVar>, 0, 0xFFFF);
ret = ret && ((0x8000 & <sRemainingItemsVar>) > 0) && ( (0x7FFF & <sRemainingItemsVar>) == <nRemainingItemsVar>);

<endif>
if (ret == 0) {
    <if(bIsBitStringType)>
    ret = BitStream_ReadBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<nRemainingItemsVar>);
    ret = if (ret == 0) 0 else <sErrCodeName>;

    <else>
    for(<sBLI>=(int)<sCurOffset>; <sBLI> \< (int)(<sCurOffset> + <nRemainingItemsVar>); <sBLI>++)
    {
        <sInternalItem>
    }

    <endif>
}
>>

FixedSize_Fragmentation_sqf_decode(p, sAcc, arrsEncodingParts, nFixedSize, bIsBitStringType) ::= <<
<arrsEncodingParts; separator="\n">
<if(bIsBitStringType)>
<p>[<nFixedSize>] = 0x0;

<endif>
>>


Fragmentation_sqf_decode(p, sAcc, sInternalItem, nIntItemMaxSize, nSizeMin, nSizeMax, nRequiredBitsForUPerEncoding, bIsVariableSize, sErrCodeName, sRemainingItemsVar, sCurBlockSize, sBlockIndex, sCurOffset, sBLJ, sBLI, sLengthTmp, bIsBitStringType, bIsAsciiString) ::= <<
<sRemainingItemsVar> = 0
<sCurBlockSize> = 0
<sCurOffset> = 0
<if(bIsVariableSize)>
<sLengthTmp> = 0
<endif>
if(!BitStream_DecodeConstraintWholeNumber(pBitStrm, &<sRemainingItemsVar>, 0, 0xFF))
    return <sErrCodeName>

while((<sRemainingItemsVar> & 0xC0) == 0xC0) {
    if (<sRemainingItemsVar> == 0xC4)
        <sCurBlockSize> = 0x10000
    else if (<sRemainingItemsVar> == 0xC3)
        <sCurBlockSize> = 0xC000
    else if (<sRemainingItemsVar> == 0xC2)
        <sCurBlockSize> = 0x8000
    else if (<sRemainingItemsVar> == 0xC1)
        <sCurBlockSize> = 0x4000
    else {
        return <sErrCodeName>
    }

    if (<sCurOffset> + <sCurBlockSize> > <nSizeMax>) {
        return <sErrCodeName>
    }

    <if(bIsBitStringType)>
    if(!BitStream_ReadBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<sCurBlockSize>))
       return <sErrCodeName>
    <else>
    <sBLI>=(int)<sCurOffset>
    while((<sBLI> \< (int)(<sCurOffset> + <sCurBlockSize>))) {
        // TODO if ret is written from here on - change to check
        <sInternalItem>
        // /TODO
        <sBLI> += 1
    }
    <endif>

    <if(bIsVariableSize)>
    <sLengthTmp> += (long)<sCurBlockSize>
    <endif>
    <sCurOffset> += <sCurBlockSize>
    if(!BitStream_DecodeConstraintWholeNumber(pBitStrm, &<sRemainingItemsVar>, 0, 0xFF))
        return <sErrCodeName>
}

if ((<sRemainingItemsVar> & 0x80) > 0) {
    var len2 = 0;
    <sRemainingItemsVar> \<\<= 8
    if(!BitStream_DecodeConstraintWholeNumber(pBitStrm, &len2, 0, 0xFF))
        return <sErrCodeName>
    
    <sRemainingItemsVar> |= len2;
    <sRemainingItemsVar> &= 0x7FFF;   
}

if(<sCurOffset> + <sRemainingItemsVar> \<= <nSizeMax>)
    return <sErrCodeName>

<if(bIsBitStringType)>
if(!BitStream_ReadBits(pBitStrm, &<p><sAcc>arr[<sCurOffset>/8], (int)<sRemainingItemsVar>)) // TODO remove adress of operator
    return <sErrCodeName>
<else>
var <sBLI>=(int)<sCurOffset>
while(<sBLI> \< (int)(<sCurOffset> + <sRemainingItemsVar>)) {
    <sInternalItem>
    <sBLI> += 1
}
<endif>

<if(bIsVariableSize)>
<sLengthTmp> += (long)<sRemainingItemsVar>
<endif>

<if(bIsVariableSize)>
if ((<sLengthTmp> >= <nSizeMin>) && (<sLengthTmp> \<= <nSizeMax>)) {
    <if(!bIsAsciiString)>
    <p><sAcc>nCount = (int)<sLengthTmp>
    <else>
    <p>[<sLengthTmp>] = 0x0
    <endif>
} else 
    return <sErrCodeName>

<else>

<if(bIsAsciiString)>
<p>[<nSizeMax>] = 0x0
<endif>

<endif>
      
}
>>

octet_string_containing_func_encode(p, sFuncName, sReqBytesForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
/*open new scope to declare some variables*/
{
    /*encode to a temporary bitstream*/
    static byte arr[<sReqBytesForUperEncoding>];
    BitStream bitStrm;
    BitStream_Init(&bitStrm, arr, sizeof(arr));

    ret = <sFuncName>(<p>, &bitStrm, false)
    if (ret) {
        int nCount = bitStrm.currentBit == 0 ? bitStrm.currentByte : (bitStrm.currentByte + 1);
        ret = BitStream_EncodeOctetString(pBitStrm, arr, nCount, <nMinSize>, <nMaxSize>);
    }
}
>>

octet_string_containing_func_decode(p, sFuncName, sReqBytesForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
/*open new scope to declare some variables*/
{	
    /*decode to a temporary bitstream*/
    static byte arr[<sReqBytesForUperEncoding>];
    BitStream bitStrm;
    BitStream_Init(&bitStrm, arr, sizeof(arr));
    int nCount;
    ret = BitStream_DecodeOctetString(pBitStrm, arr, &nCount, <nMinSize>, <nMaxSize>);
    if (ret) {
        ret = <sFuncName>(<p>, &bitStrm);
    }
}
>>

bit_string_containing_func_encode(p, sFuncName, sReqBytesForUperEncoding, sReqBitsForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
/*open new scope to declare some variables*/
{
    /*encode to a temporary bitstream*/
    static byte arr[<sReqBytesForUperEncoding>];
    BitStream bitStrm;
    BitStream_Init(&bitStrm, arr, sizeof(arr));

    ret = <sFuncName>(<p>, &bitStrm, false)
    if (ret) {
        int nCount = bitStrm.currentByte*8 + bitStrm.currentBit;
        ret = BitStream_EncodeBitString(pBitStrm, arr, nCount, <nMinSize>, <nMaxSize>);
    }
}
>>

bit_string_containing_func_decode(p, sFuncName, sReqBytesForUperEncoding, sReqBitsForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
/*open new scope to declare some variables*/
{	
    /*decode to a temporary bitstream*/
    static byte arr[<sReqBytesForUperEncoding>];
    BitStream bitStrm;
    BitStream_Init(&bitStrm, arr, sizeof(arr));
    int nCount;
    ret = BitStream_DecodeBitString(pBitStrm, arr, &nCount, <nMinSize>, <nMaxSize>);
    if (ret) {
        ret = <sFuncName>(<p>, &bitStrm)
    }
}
>>


sparkAnnotations_encode(sTypeDefName) ::= <<
>>

sparkAnnotations_decode(sTypeDefName) ::= <<
>>

decode_nullType(p) ::= <<
/*no encoding/decoding is required*/
>>

decode_empty_sequence_emptySeq(p) ::= <<
/*no encoding/decoding is required*/
>>

JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if (ret) {
    <soNestedPart>
}

<endif>
>>



InternalItem_bit_str_encode(p, i, sErrCode) ::=<<
>>

InternalItem_bit_str_decode(p, i, sErrCode) ::=<<
>>
