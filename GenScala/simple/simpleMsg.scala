/*
Code automatically generated by asn1scc tool
*/

import asn1crt_encoding
import asn1crt_encoding_uper

import simpleMsg // this should be the actual header of this file



def Message_anInt_IsConstraintValid(intRef: Ref[Message_anInt]): Int = 
{
    var ret = 0 // isvalid_scala.stg:80

    if (((intRef).x <= 267UL)) 0 else ERR_MESSAGE_ANINT // isvalid_scala:51

	ret
}

def Message_tenByteString_IsConstraintValid(@annotation.unused pVal: Ref[Message_tenByteString]): Int = 
{
    var ret = 0 // isvalid_scala.stg:80

    ret = 0 // isvalid_scala:61

	ret
}

def Message_IsConstraintValid(pVal: Ref[Message]): Int = 
{
    var ret = 0 // isvalid_scala.stg:80

    ret = Message_anInt_IsConstraintValid(Ref(pVal.x.anInt))
    if (ret == 0) {
        ret = Message_tenByteString_IsConstraintValid(Ref(pVal.x.tenByteString))
    }

	ret
}

def Message_anInt_Initialize(pVal: Ref[Message_anInt]): Unit = // init_scala:12
{
	(pVal).x = 0;
}
def Message_tenByteString_Initialize(pVal: Ref[Message_tenByteString]): Unit = // init_scala:12
{
	var i1 = 0;
	(while (i1 < 10) {
	    pVal.x.arr(i1) = 0;
	    i1 += 1;
	})
}
def Message_Initialize(pVal: Ref[Message]): Unit = // init_scala:12
{

	/*set anInt */
	Message_anInt_Initialize(Ref(pVal.x.anInt));
	/*set tenByteString */
	Message_tenByteString_Initialize(Ref(pVal.x.tenByteString));
	/*set aBool */
	pVal.x.aBool = false;
}

def Message_Encode(pVal: Ref[Message], pBitStrm: Ref[BitStream], bCheckConstraints: Boolean): Int = //uper_scala:38
{
    var ret = 0

	if (bCheckConstraints) 
		ret = Message_IsConstraintValid(pVal)
	if (ret == 0) {
	    /*Encode anInt */
	    BitStream_EncodeConstraintPosWholeNumber(pBitStrm, pVal.x.anInt, 0, 267);
	    if (ret == 0) {
	        /*Encode tenByteString */
	        ret = BitStream_EncodeOctetString_no_length(pBitStrm, pVal.x.tenByteString.arr, 10);
	        if (ret == 0) {
	            /*Encode aBool */
	            BitStream_AppendBit(pBitStrm,pVal.x.aBool);
	        }
	    }
    }
	
    ret
}

def Message_Decode(pVal: Message, pBitStrm: Ref[BitStream]): Int = 
{
    var ret = 0;


	/* Decode anInt */
	if(!BitStream_DecodeConstraintPosWholeNumber(pBitStrm, Ref(pVal.x.anInt), 0, 267))
		ret = ERR_UPER_DECODE_MESSAGE_ANINT // uper_scala:153
	if (ret == 0) {
	    /* Decode tenByteString */
	    ret = if (BitStream_DecodeOctetString_no_length(pBitStrm, pVal.x.tenByteString.arr, 10)) 0 else 1
	    if (ret == 0) {
	        /* Decode aBool */
	        if(!BitStream_ReadBit(pBitStrm, Ref(pVal.x.aBool)))
	        	ret = ERR_UPER_DECODE_MESSAGE_ABOOL
	    }
	}

	if (ret == 0)
		ret = Message_IsConstraintValid(pVal) 
	ret
}


